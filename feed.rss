<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Swift and iOS dev with Igor</title><description>The ride of the iOS developer</description><link>https://igor1309.github.com</link><language>en</language><lastBuildDate>Sun, 25 Dec 2022 08:29:38 +0000</lastBuildDate><pubDate>Sun, 25 Dec 2022 08:29:38 +0000</pubDate><ttl>250</ttl><atom:link href="https://igor1309.github.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://igor1309.github.com/articles/2022/2022-12-05-openais-chatgpt</guid><title>🤯</title><description>Prototyping SwiftUI interfaces with OpenAI's ChatGPT</description><link>https://igor1309.github.com/articles/2022/2022-12-05-openais-chatgpt</link><pubDate>Mon, 5 Dec 2022 07:45:00 +0000</pubDate><content:encoded><![CDATA[<h1>🤯</h1><p><a href="https://www.createwithswift.com/prototyping-swiftui-interfaces-with-openais-chatgpt/">Prototyping SwiftUI interfaces with OpenAI's ChatGPT</a></p><blockquote><p>Understand how to use OpenAI's ChatGPT conversational machine learning model to create working code for SwitfUI apps within a few minutes.</p></blockquote><p><a href="https://dimillian.medium.com/chatgpt-and-midjourney-will-change-our-life-forever-d5590836fbd9">ChatGPT and Midjourney will change our life. Forever. | by Thomas Ricouard | Dec, 2022 | Medium</a></p><blockquote><p>We don’t realise it yet, but our daily workflow will be completely changed and integrated with those new kind of tools</p></blockquote>]]></content:encoded></item><item><guid isPermaLink="true">https://igor1309.github.com/articles/2022/2022-10-18-essential-blue-belt</guid><title>Essential Blue Belt 🔵</title><description>iOS Lead Essentials Certification (Essential Developer)</description><link>https://igor1309.github.com/articles/2022/2022-10-18-essential-blue-belt</link><pubDate>Tue, 18 Oct 2022 13:13:00 +0000</pubDate><content:encoded><![CDATA[<h1>Essential Blue Belt 🔵</h1><p>I’m super excited and proud to share that I’ve completed the <a href="https://iosacademy.essentialdeveloper.com/p/ios-lead-essentials/">iOS Lead Essentials</a> program at the <a href="http://essentialdeveloper.com/">Essential Developer</a> 🎉</p><p>I’ve been following <a href="https://www.linkedin.com/in/caiozullo/">Caio Zullo</a> and <a href="https://www.linkedin.com/in/mapostolakis/">Mike Apostolakis</a> for some time via their excellent <a href="https://youtube.com/c/EssentialDeveloper">YouTube channel</a> before joining the program last December. Their classical way of teaching based on fundamentals and best industry practices speaks dearly to my heart.</p><p>SOLID principles, design patterns, CI/CD, TDD, architecture, and modularity are not just some buzzwords for the CV or tech interview but <strong>essential</strong> (sic!) and vital concepts deeply ingrained in every step of app dev.</p><p>It has become second nature to start coding with</p><pre><code><span class="keyword">func</span> test_smth_shouldDeliverThis_onThat() {
    <span class="keyword">let</span> sut = <span class="call">makeSUT</span>()
</code></pre><p>I can’t recommend this course enough as a great source of knowledge, ideas, and inspiration. I have no doubt they will continue to be an essential and valuable part of the developer community and I plan to be a part of it in years to come.</p><p>Thank you, Caio, Mike, <a href="https://www.linkedin.com/in/bpoplauschi/">Bogdan</a>, <a href="https://www.linkedin.com/in/raphsilva/">Raphael Silva</a>, <a href="https://www.linkedin.com/in/marko-engelman/">Marko Engelman</a>, Danil Lahtin, and all instructors and students of the Academy!</p><br/><div align="center">
<img src="../../../images/about/certificate-of-completion-for-ios-lead-essentials.png" width="100%" title="Certificate of completion for iOS Lead Essentials program at the Essential Developer Academy">
</div><br/>]]></content:encoded></item><item><guid isPermaLink="true">https://igor1309.github.com/articles/2022/2022-09-23-replicating-stocks-ui</guid><title>Replicating Search UI of the Stocks app</title><description>Replicating Search UI of the Stocks app with SwiftUI `searchable` API</description><link>https://igor1309.github.com/articles/2022/2022-09-23-replicating-stocks-ui</link><pubDate>Fri, 23 Sep 2022 10:10:00 +0000</pubDate><content:encoded><![CDATA[<h1>Replicating Search UI of the Stocks app</h1><p>This use case is inspired by Apple‘s Stocks app. There is a local watchlist, which is empty initially, and the user can add assets to this watchlist by searching for the asset, search is performed by typing in the search field. API returns some search results that can be added to the watchlist by tapping on the plus button. If the asset is already in the watchlist, there would be a checkmark instead of a plus button, the checkmark is actually a button, and if the user taps on this button, then this asset would be removed from the watchlist.</p><p>This way watchlist could be edited while searching: adding and deleting multiple assets.</p><p>So this is a use case for searchable API, but not for the search of local items or items that are already presented in the list, but searching it by querying the API.</p><h2>Search suggestions</h2><p>Search suggestions are active if the watchlist is empty.</p><h2>Tokens</h2><p>The use of tokens is not utilized, the possible idea could be to use tokens as a way to broaden or narrow the search - another dimension in addition to Scope.</p><br/><div align="center">
<video id="Demo video" width="100%" controls>
        <source src = "../../../images/searchable/searchable_demo.mp4" type = "video/mp4">
    </video><br/>
</div><br/><p>To see tokens use case switch to the branch <code>tokens</code>.</p><h2>Structure</h2><br/><div align="center">
<img src="../../../images/searchable/folder_structure.png" max-width="100%" title="Folder structure">
<br/>
</div><br/><h2>References</h2><ul><li><a href="https://developer.apple.com/documentation/swiftui/environmentvalues/dismisssearch">dismissSearch</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://igor1309.github.com/articles/2022/2022-09-21-tdd-vs-bdd</guid><title>Dave Farley: TDD vs BDD</title><description>Dave Farley talks about TDD (Test Driven Development) and BDD (Behaviour Driven Development)</description><link>https://igor1309.github.com/articles/2022/2022-09-21-tdd-vs-bdd</link><pubDate>Wed, 21 Sep 2022 10:10:00 +0000</pubDate><content:encoded><![CDATA[<h1>Dave Farley: TDD vs BDD</h1><p><a href="https://www.youtube.com/watch?v=Bq_oz7nCNUA">Test Driven Development vs Behavior Driven Development - YouTube</a></p><p>Totally worth watching. From the video description:</p><blockquote><p>TDD vs BDD, Test Driven Development vs Behaviour Driven Development which is most important to get right? Most people think of BDD and TDD as having distinctly different focusses in an effective automated testing strategy. In fact they are more closely related than many people think. In this episode on the <a href="https://www.youtube.com/c/ContinuousDelivery">Continuous Delivery channel</a>, Dave Farley, who was involved in the creation of BDD, explains his slightly more unusual take on the real value of this approach to creating automated tests. Dave believes that TDD and BDD are at the foundations of a sound software engineering approach to software development and explores these ideas with some real-world examples of good and bad automated tests.</p></blockquote>]]></content:encoded></item><item><guid isPermaLink="true">https://igor1309.github.com/articles/2022/2022-09-07-whats-new-in-swift-57</guid><title>What’s new in Swift 5.7</title><description>A link to Paul Hudson’s What’s new in Swift 5.7</description><link>https://igor1309.github.com/articles/2022/2022-09-07-whats-new-in-swift-57</link><pubDate>Wed, 7 Sep 2022 10:10:00 +0000</pubDate><content:encoded><![CDATA[<h1>What’s new in Swift 5.7</h1><p>Paul Hudson published a thorough <a href="https://www.hackingwithswift.com/articles/249/whats-new-in-swift-5-7">What’s new in Swift 5.7 – Hacking with Swift</a> with <a href="https://github.com/twostraws/whats-new-in-swift-5-7">playground</a>. He also has <a href="https://www.hackingwithswift.com/swift/5.7">a list of separate articles</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://igor1309.github.com/articles/2022/2022-09-06-dependencies</guid><title>Dependencies</title><description>Dependencies: best practices</description><link>https://igor1309.github.com/articles/2022/2022-09-06-dependencies</link><pubDate>Tue, 6 Sep 2022 10:10:00 +0000</pubDate><content:encoded><![CDATA[<h1>Dependencies</h1><ol><li>Control your dependencies</li></ol><p>For example, with thin wrappers (<code>Facade Design Pattern</code>).</p><ol start="2"><li>Use <strong>explicit</strong> dependencies, not implicit.</li></ol>]]></content:encoded></item><item><guid isPermaLink="true">https://igor1309.github.com/articles/2022/2022-09-06-localization</guid><title>Localization</title><description>Localizations - essential links</description><link>https://igor1309.github.com/articles/2022/2022-09-06-localization</link><pubDate>Tue, 6 Sep 2022 10:10:00 +0000</pubDate><content:encoded><![CDATA[<h1>Localization</h1><ul><li><a href="https://developer.apple.com/localization/">Localization - Apple Developer</a></li></ul><ul><li>WWDC Videos - Apple Developer</li></ul><ul><li><a href="https://developer.apple.com/videos/play/wwdc2020/10169/">Swift packages: Resources and localization - WWDC20 - Videos - Apple Developer</a></li></ul><ul><li><a href="https://developer.apple.com/videos/play/wwdc2022/10110">Build global apps: Localization by example - WWDC22 - Videos - Apple Developer</a></li></ul><ul><li><a href="https://developer.apple.com/videos/play/wwdc2021/10221">Streamline your localized strings - WWDC21 - Videos - Apple Developer</a></li></ul><ul><li><a href="https://developer.apple.com/videos/play/wwdc2021/10220">Localize your SwiftUI app - WWDC21 - Videos - Apple Developer</a></li></ul><ul><li><a href="https://developer.apple.com/videos/play/wwdc2019/403">Creating Great Localized Experiences with Xcode 11 - WWDC19 - Videos - Apple Developer</a></li></ul><ul><li><a href="https://developer.apple.com/videos/play/wwdc2021/10109">What's new in Foundation - WWDC21 - Videos - Apple Developer</a></li></ul><ul><li><a href="https://developer.apple.com/videos/play/wwdc2022/10107">Get it right (to left) - WWDC22 - Videos - Apple Developer</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/Xcode/localizing-package-resources">Localizing Package Resources | Apple Developer Documentation</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/xcode/localization">Localization | Apple Developer Documentation</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/xcode/localizing-strings-that-contain-plurals">Localizing Strings That Contain Plurals</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/xcode/preparing-your-interface-for-localization">Preparing Your Interface for Localization</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/SwiftUI/Preparing-Views-for-Localization">Preparing views for localization</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/xcode/adding-support-for-languages-and-regions">Adding Support for Languages and Regions</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/xcode/choosing-localization-regions-and-scripts">Choosing Localization Regions and Scripts</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/xcode/adding-resources-to-localizations">Adding Resources to Localizations</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/xcode/localizing-assets-in-a-catalog">Localizing Assets in a Catalog</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/xcode/creating-screenshots-of-your-app-for-localizers">Creating Screenshots of Your App for Localizers</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/xcode/exporting-localizations">Exporting Localizations</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/xcode/editing-xliff-and-strings-files">Editing XLIFF and Strings Files</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/xcode/importing-localizations">Importing Localizations</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/xcode/previewing-localizations">Previewing Localizations</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/xcode/bundling-resources-with-a-swift-package">Bundling Resources with a Swift Package</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/xcode/testing-localizations-when-running-your-app">Testing Localizations When Running Your App</a></li></ul><ul><li><a href="https://academy.essentialdeveloper.com/courses/447455/lectures/11463761">Essential Developer: Creating, Localizing, and Testing Customer Facing Strings in the Presentation Layer + NSLocalizedString Best Practices</a></li></ul><ul><li><a href="https://www.raywenderlich.com/27469286-swiftui-localization-tutorial-for-ios-getting-started">SwiftUI Localization Tutorial for iOS: Getting Started | raywenderlich.com</a></li></ul><ul><li><a href="https://useyourloaf.com/blog/add-resources-to-swift-packages/#localizing-resources">Use Your Loaf: Add resources to Swift packages: Localizing Resources</a></li></ul><ul><li><a href="https://useyourloaf.com/blog/flipping-and-localizing-image-assets/">Use Your Loaf: Flipping and Localizing Image Assets</a></li></ul><h2>iOS16 Beta | Apple Developer Documentation</h2><ul><li><a href="https://developer.apple.com/documentation/foundation/localizedstringresource">LocalizedStringResource</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/foundation/localizedstringresource/bundledescription">LocalizedStringResource.BundleDescription</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/foundation/customlocalizedstringresourceconvertible">CustomLocalizedStringResourceConvertible</a></li></ul><h2>Testing</h2><p>Write tests for localizations:</p><ul><li>make sure localized strings have keys and values for all supported localizations,</li></ul><ul><li>use snapshot tests.</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://igor1309.github.com/articles/2022/2022-09-01-fastlane-snapshot</guid><title>fastlane: snapshot</title><description>fastlane snapshot to automate taking localized screenshots for iOS and tvOS apps on every device</description><link>https://igor1309.github.com/articles/2022/2022-09-01-fastlane-snapshot</link><pubDate>Thu, 1 Sep 2022 15:15:00 +0000</pubDate><content:encoded><![CDATA[<h1>fastlane: snapshot</h1><ol><li>Create dedicated UI Test Target and Scheme (enable <code>Run</code> option for the Test Target) for snapshots.</li></ol><ol start="2"><li>Run</li></ol><pre><code>$ bundle exec fastlane snapshot <span class="keyword">init</span>
</code></pre><ol start="3"><li>Add <code>SnapshotHelper.swift</code> to Test Target.</li></ol><ol start="4"><li>Add UI tests for snapshots.</li></ol><ol start="5"><li>Edit <code>Snapfile</code> - select devices and languages.</li></ol><ol start="6"><li>Run <code></code>`sh $ bundle exec fastlane snapshot <code></code>`</li></ol><p>For more see <a href="https://docs.fastlane.tools/actions/snapshot/">snapshot - fastlane docs</a>, <a href="https://docs.fastlane.tools/getting-started/ios/screenshots/">Screenshots - fastlane docs</a>, and <a href="https://krausefx.com/blog/creating-perfect-app-store-screenshots-of-your-ios-app">Creating perfect App Store Screenshots of your iOS App · Felix Krause</a>.</p><h2>References</h2><ul><li><a href="https://www.raywenderlich.com/1259223-fastlane-for-ios/lessons/30">Fastlane for iOS, Episode 30: Snapshot | raywenderlich.com</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://igor1309.github.com/articles/2022/2022-09-01-fastlane-metadata</guid><title>fastlane: Metadata</title><description>Check your app metadata against App Store review rules with fastlane</description><link>https://igor1309.github.com/articles/2022/2022-09-01-fastlane-metadata</link><pubDate>Thu, 1 Sep 2022 10:10:00 +0000</pubDate><content:encoded><![CDATA[<h1>fastlane: Metadata</h1><p>Apple can reject an app for metadata issues like mentioning other platforms, bad-mouthing Apple, and others. Use <code>fastlane</code>'s <code>precheck</code> to examine your app for App Store review rules compliance.</p><pre><code>$ bundle exec fastlane precheck
</code></pre><p><code>precheck</code> is an alias for the <code>check_app_store_metadata</code>.</p><p>Use <code>Precheckfile</code> to store your precheck defaults, run <code>fastlane precheck init</code> to create one. Set the desired level for the check: <code>skip</code>, <code>warn</code>, or <code>error</code>:</p><pre><code># skip checking this metadata
<span class="call">negative_apple_sentiment</span>(level: :skip)

# trigger a warning
<span class="call">curse_words</span>(level: :warn)

# show error and stop after precheck
<span class="call">unreachable_urls</span>(level: :error)

# check <span class="keyword">for</span> words
<span class="call">custom_text</span>(
    data: [<span class="string">"chrome"</span>, <span class="string">"webos"</span>],
    level: :warn
)
</code></pre><p>By default all levels are set to <code>:error</code>, so you need to list only those keys that you want to skip or warn.</p><p>At the time of writing, <em>"precheck cannot check In-app purchases with the App Store Connect API Key (yet)"</em>, but the default is <code>true</code>, so it makes sense to change it to <code>false</code>.</p><p><strong>Important</strong>: <code>precheck</code> does not check <code>Appfile</code> for App Store credentials and app identifiers, so you'd need to add them into <code>Precheckfile</code>:</p><pre><code>app_identifier <span class="type">APP_IDENTIFIER</span>
username <span class="type">USERNAME</span>
team_name <span class="type">TEAM_NAME</span>
team_id <span class="type">TEAM_ID</span>
</code></pre><p>Use in <code>Fastfile</code>:</p><pre><code># run precheck alone
lane :check_metadata <span class="keyword">do</span>
    precheck
end
</code></pre><p><code>precheck</code> is also integrated with <a href="https://docs.fastlane.tools/actions/deliver/"><code>deliver</code></a>:</p><pre><code># <span class="type">Fastfile</span>

lane :production <span class="keyword">do</span>
    # ...

    # by <span class="keyword">default</span> deliver will call precheck and warn you of any problems
    # <span class="keyword">if</span> you want precheck to halt submitting to app review, you can pass
    # precheck_default_rule_level: :error
    <span class="call">deliver</span>(precheck_default_rule_level: :error)

    # ...
end
</code></pre><p>For the full list of the keys to check and more see <a href="https://docs.fastlane.tools/actions/precheck/">precheck - fastlane docs</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://igor1309.github.com/articles/2022/2022-08-30-supermodular</guid><title>Supermodular App Scaffolding</title><description>How to create a basic scaffolding for a super modularized app</description><link>https://igor1309.github.com/articles/2022/2022-08-30-supermodular</link><pubDate>Tue, 30 Aug 2022 10:10:00 +0000</pubDate><content:encoded><![CDATA[<h1>Supermodular App Scaffolding</h1><p>Create a new Swift Package in the terminal</p><pre><code>$ mkdir <span class="type">QuoteWatcher</span>
$ cd <span class="type">QuoteWatcher</span>
$ swift package <span class="keyword">init</span>
</code></pre><p>Initiate Git and commit</p><pre><code>$ git <span class="keyword">init</span>
$ git add .
$ git commit -am '<span class="type">Add</span> basic scaffolding <span class="keyword">for</span> `<span class="type">QuoteWatcher</span>` <span class="type">Swift Package</span>'
</code></pre><p>Open Xcode, create a new <code>iOS</code> project <code>QuoteWatcher</code> (do not use Core Data, do not include tests)</p><br/><div align="center">
<img src="../../../images/supermodular/create.png" width="100%" title="Create">
</div><br/><p>Save to the <code>QuoteWatcher</code> folder (do not add to any project or workspace)</p><br/><div align="center">
<img src="../../../images/supermodular/save.png" width="100%" title="Save">
<br/>
</div><br/><p>Close the project. Back in the terminal rename <code>QuoteWatcher</code> to <code>App</code></p><pre><code>$ mv <span class="type">QuoteWatcher App</span>
</code></pre><p>Commit</p><pre><code>$ git add .
$ git commit -m '<span class="type">Create</span> `<span class="type">QuoteWatcher</span>` project'
</code></pre><p>Open the project in the Xcode. Drag the folder <code>QuoteWatcher</code> into the project</p><br/><div align="center">
<img src="../../../images/supermodular/drag.png" width="100%" title="Drag">
<br/>
</div><br/><p>Local Swift Package would be added to the Xcode project.</p><br/><div align="center">
<img src="../../../images/supermodular/app.png" width="100%" title="App">
<br/>
</div><br/><p>We'll handle the <code>App</code> folder in a moment, but first, let's commit changes to the <code>App/QuoteWatcher.xcodeproj/project.pbxproj</code> file</p><pre><code>$ git commit -am '<span class="type">Add Swift Package</span> to <span class="type">Xcode</span> project'
</code></pre><p>Add an empty Swift Package to hide the <code>App</code> folder from the Xcode</p><br/><details>
<summary>Until syntax lighlighting issue with comments is resolved, use:</summary>
<div>
<br/>
<p>cat > App/Package.swift << ENDOFFILE</p>

<p>// swift-tools-version:5.6</p>

<p>// Leave blank. This is only here so that Xcode doesn't display it.</p>

<p>import PackageDescription</p>

<p>let package = Package(</p>
<p>&emsp;name: "client",</p>
<p>&emsp;products: [],</p>
<p>&emsp;targets: []</p>
<p>)</p>

<p>ENDOFFILE</p>
<div>
</details><br/><br/><pre><code>$ cat &gt; <span class="type">App</span>/<span class="type">Package</span>.<span class="property">swift</span> &lt;&lt; <span class="type">ENDOFFILE</span>
<span class="comment">// swift-tools-version:5.6

// Leave blank. This is only here so that Xcode doesn't display it.</span>

<span class="keyword">import</span> PackageDescription

<span class="keyword">let</span> package = <span class="type">Package</span>(
    name: <span class="string">"client"</span>,
    products: [],
    targets: []
)
<span class="type">ENDOFFILE</span>
</code></pre><p>Reopen the project in the Xcode. Now the <code>App</code> folder is hidden.</p><br/><div align="center">
<img src="../../../images/supermodular/no-app.png" width="67.625%" title="No app">
<br/>
</div><br/><p>Commit</p><pre><code>$ git add .
$ git commit -m '<span class="type">Add</span> empty <span class="type">Swift Package</span> to hide `<span class="type">App</span>` folder from <span class="type">Xcode</span>'
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://igor1309.github.com/articles/2022/2022-08-25-decorator-protocol-witness</guid><title>The Decorator Pattern with Protocol and Protocol Witnesses</title><description>Exploring the way of the Decorator Pattern implementation with Protocol and Protocol Witnesses</description><link>https://igor1309.github.com/articles/2022/2022-08-25-decorator-protocol-witness</link><pubDate>Thu, 25 Aug 2022 10:10:00 +0000</pubDate><content:encoded><![CDATA[<h1>The Decorator Pattern with Protocol and Protocol Witnesses</h1><p><em>Gang of Four Design Patterns</em>:</p><blockquote><p>Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.</p></blockquote><p><em><a href="https://www.essentialdeveloper.com/articles/design-patterns-in-ios-swift-standing-on-the-shoulder-of-giants-ios-lead-essentials-podcast-014?rq=Decorator">Essential Developer: Design Patterns in iOS/Swift: Standing on the shoulder of giants | iOS Lead Essentials Podcast #014</a></em>:</p><blockquote><p>The Decorator pattern offers a way of adding behavior to an individual object and extending its functionality without subclassing or changing the object’s class.<br/><br/> Decorators are useful when you want to add or alter the behavior of individual objects instead of an entire class of objects.<br/><br/> To implement the Decorator pattern, you create a new object (decorator) that encloses and conforms to the interface of the component (decoratee) it decorates. The decorator class will contain the extended behavior and forward messages to the decoratee.<br/><br/> By doing so, the decorator can be used by the clients of the interface, extending the behavior of the system without needing to alter any existing components.<br/><br/> The Decorator pattern is supported by the SOLID principles, especially the Single Responsibility, Liskov Substitution, and Open/Closed Principles.<br/><br/> You can use Decorators to add Cross-Cutting concerns such as Logging, Analytics, Threading, Security, etc. into your modules in a clean way while maintaining low coupling in your applications.</p></blockquote><h2>Decorator with protocol</h2><pre><code><span class="keyword">protocol</span> Logger {
    <span class="keyword">func</span> log(<span class="keyword">_</span> message: <span class="type">String</span>)
}

<span class="keyword">final class</span> PrintLogger: <span class="type">Logger</span> {
    <span class="keyword">func</span> log(<span class="keyword">_</span> message: <span class="type">String</span>) {
        <span class="call">print</span>(message)
    }
}

<span class="keyword">protocol</span> SendMessageInput {
    <span class="keyword">associatedtype</span> MessageDetails
    <span class="keyword">associatedtype</span> ChannelID

    <span class="keyword">func</span> send(<span class="keyword">_</span> messageDetails: <span class="type">MessageDetails</span>, to channelID: <span class="type">ChannelID</span>) <span class="keyword">throws</span>
}

<span class="keyword">final class</span> DummySendMessageInput: <span class="type">SendMessageInput</span> {
    <span class="keyword">typealias</span> MessageDetails = <span class="type">String</span>
    <span class="keyword">typealias</span> ChannelID = <span class="type">Int</span>

    <span class="keyword">func</span> send(<span class="keyword">_</span> messageDetails: <span class="type">MessageDetails</span>, to channelID: <span class="type">ChannelID</span>) <span class="keyword">throws</span> {
        <span class="comment">// do nothing</span>
    }
}
</code></pre><h3>Decorator</h3><p>Let’s extend the functionally of the <code>DummySendMessageInput</code> class by logging:</p><p>To create <code>decorator</code> with protocols we need a new class, conforming to <code>SendMessageInput</code>, and initialized with <code>logger</code> and <code>decoratee</code></p><pre><code><span class="keyword">final class</span> DecoratedDummySendMessageInput: <span class="type">SendMessageInput</span> {
    <span class="keyword">private let</span> logger: <span class="type">Logger</span>
    <span class="keyword">private let</span> decoratee: <span class="type">DummySendMessageInput</span>

    <span class="keyword">init</span>(logger: <span class="type">Logger</span>, decoratee: <span class="type">DummySendMessageInput</span>) {
        <span class="keyword">self</span>.<span class="property">logger</span> = logger
        <span class="keyword">self</span>.<span class="property">decoratee</span> = decoratee
    }
}
</code></pre><p>Extended functionality</p><pre><code>     <span class="keyword">func</span> send(<span class="keyword">_</span> messageDetails: <span class="type">String</span>, to channelID: <span class="type">String</span>) <span class="keyword">throws</span> {
        logger.<span class="call">log</span>(“<span class="type">Started</span> sending message.”)
        <span class="keyword">try self</span>.<span class="call">send</span>(messageDetails, to: channelID)
        logger.<span class="call">log</span>(“<span class="type">Started</span> sending message.”)
    }
}
</code></pre><h2>Decorator with Protocol Witness</h2><p>Corresponds to protocol <code>Logger</code></p><pre><code><span class="keyword">struct</span> Logging {
    <span class="keyword">let</span> log: (<span class="type">String</span>) -&gt; <span class="type">Void</span>
}
</code></pre><p>Protocol witness</p><pre><code><span class="keyword">extension</span> <span class="type">Logging</span> {
    <span class="keyword">static let</span> printLogging: <span class="type">Self</span> = .<span class="keyword">init</span> { <span class="call">print</span>($0) }
}
</code></pre><p>Corresponds to protocol <code>SendMessageInput</code></p><pre><code><span class="keyword">struct</span> SendingMessageInput&lt;MessageDetails, ChannelID&gt; {
    <span class="keyword">let</span> send: (<span class="type">MessageDetails</span>, <span class="type">ChannelID</span>) <span class="keyword">throws</span> -&gt; <span class="type">Void</span>
}
</code></pre><p>Protocol witness, corresponds to <code>DummySendMessageInput</code></p><pre><code><span class="keyword">extension</span> <span class="type">SendingMessageInput</span>
<span class="keyword">where</span> <span class="type">MessageDetails</span> == <span class="type">String</span>,
      <span class="type">ChannelID</span> == <span class="type">String</span> {
    <span class="keyword">static var</span> dummy: <span class="type">Self</span> { .<span class="keyword">init</span> { <span class="keyword">_</span>, <span class="keyword">_ in</span> } }
}
</code></pre><h3>Decorator</h3><p>To create <code>decorator</code> with protocol witnesses we do not need a new type, just a function that extends existing type with injected instance of <code>Logging</code></p><pre><code><span class="keyword">extension</span> <span class="type">SendingMessageInput</span> {
    <span class="keyword">func</span> decorated(with logger: <span class="type">Logging</span>) -&gt; <span class="type">Self</span> {
        .<span class="keyword">init</span> { messageDetails, channelID <span class="keyword">in</span>
            logger.<span class="call">log</span>(“<span class="type">Started</span> sending message.”)
            <span class="keyword">try</span> <span class="call">send</span>(messageDetails, channelID)
            logger.<span class="call">log</span>(“<span class="type">Started</span> sending message.”)
        }
    }
}

<span class="keyword">let</span> decoratedStringDummy: <span class="type">SendingMessageInput</span> = .<span class="dotAccess">stringDummy</span>.<span class="call">decorated</span>(with: .<span class="dotAccess">printLogging</span>)
</code></pre><h2>References</h2><ul><li><a href="https://www.essentialdeveloper.com/articles/design-patterns-in-ios-swift-standing-on-the-shoulder-of-giants-ios-lead-essentials-podcast-014?rq=Decorator">Design Patterns in iOS/Swift: Standing on the shoulder of giants | iOS Lead Essentials Podcast #014 - Essential Developer</a></li></ul><ul><li><a href="https://www.essentialdeveloper.com/articles/testing-code-that-uses-dispatchqueue-main-async-ios-lead-essentials-community-qa?rq=Decorator">Testing code that uses DispatchQueue.main.async | iOS Lead Essentials Community Q&amp;A — Essential Developer</a></li></ul><ul><li><strong>Gang of Four (GoF) Design Patterns</strong>: <a href="https://www.goodreads.com/book/show/85009.Design_Patterns">Design Patterns: Elements of Reusable Object-Oriented Software</a> by Erich Gamma, Ralph Johnson, John Vlissides, Richard Helm</li></ul><ul><li><a href="https://springframework.guru/gang-of-four-design-patterns/">Gang of Four Design Patterns - Spring Framework Guru</a></li></ul><ul><li><a href="https://springframework.guru/gang-of-four-design-patterns/decorator-pattern/">Decorator Pattern - Spring Framework Guru</a></li></ul><ul><li><a href="https://www.pointfree.co/episodes/ep34-protocol-witnesses-part-2">Episode #34: Protocol Witnesses: Part 2 (Subscriber-Only)</a></li></ul><ul><li><a href="https://www.pointfree.co/episodes/ep35-advanced-protocol-witnesses-part-1">Episode #35: Advanced Protocol Witnesses: Part 1 (Subscriber-Only)</a></li></ul><ul><li><a href="https://www.pointfree.co/episodes/ep36-advanced-protocol-witnesses-part-2">Episode #36: Advanced Protocol Witnesses: Part 2 (Subscriber-Only)</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://igor1309.github.com/articles/2022/2022-08-24-protocol-witness</guid><title>Protocol Witnesses</title><description>Re-watch and recap of Point-Free series on Protocol Witnesses</description><link>https://igor1309.github.com/articles/2022/2022-08-24-protocol-witness</link><pubDate>Wed, 24 Aug 2022 10:10:00 +0000</pubDate><content:encoded><![CDATA[<h1>Protocol Witnesses</h1><h2>Episode #33: Protocol Witnesses: Part 1</h2><p><a href="https://www.pointfree.co/episodes/ep33-protocol-witnesses-part-1">Episode #33 • Oct 15, 2018 • Subscriber-Only</a></p><p>Protocols are a great tool for abstraction, but aren’t the only one. This week we begin to explore the tradeoffs of using protocols by highlighting a few areas in which they fall short in order to demonstrate how we can recover from these problems using a different tool and different tradeoffs.</p><blockquote><p>... protocols are quite rigid in that a type can conform to a given protocol in only one single way. Sometimes it’s completely valid and even technically correct to allow a type to conform to a protocol in multiple ways.</p></blockquote><h2>Episode #34: Protocol Witnesses: Part 2</h2><p><a href="https://www.pointfree.co/episodes/ep34-protocol-witnesses-part-2">Episode #34 • Oct 22, 2018 • Subscriber-Only</a></p><p>Last time we covered some basics with protocols, and demonstrated one of their biggest pitfalls: types can only conform to a protocol a single time. Sometimes it’s valid and correct for a type to conform to a protocol in many ways. We show how to remedy this by demonstrating that one can scrap any protocol in favor of a simple datatype, and in doing so opens up a whole world of composability.</p><blockquote><p>What’s the point of going through the motions of translating protocols to structs when Swift has given us protocols ...?</p></blockquote><blockquote><p>First, this process of translating protocols into structs and then passing around explicit witnesses is literally what the Swift compiler is doing under the hood. It’s nice to know that there isn’t any real magic happening behind the scenes, and that the concepts are super simple.</p></blockquote><blockquote><p>Second, explicit witnesses give us a whole new level composability with our conformances that was impossible to see when we are dealing with protocols.</p></blockquote><p>Using <code>contramap</code>.</p><h2>Episode #35: Advanced Protocol Witnesses: Part 1</h2><p><a href="https://www.pointfree.co/episodes/ep35-advanced-protocol-witnesses-part-1">Episode #35 • Oct 29, 2018 • Subscriber-Only</a></p><p>Now that we know it’s possible to replace protocols with concrete datatypes, and now that we’ve seen how that opens up new ways to compose things that were previously hidden from us, let’s go a little deeper. We will show how to improve the ergonomics of writing Swift in this way, and show what Swift’s powerful conditional conformance feature is represented by just plain functions.</p><p>Rename <code>contramap</code> to <code>pullback</code>.</p><h2>Episode #36: Advanced Protocol Witnesses: Part 2</h2><p><a href="https://www.pointfree.co/episodes/ep36-advanced-protocol-witnesses-part-2">Episode #36 • Nov 5, 2018 • Subscriber-Only</a></p><p>We complete our dictionary for translating Swift protocol concepts into concrete datatypes and functions. This includes protocol inheritance, protocol extensions, default implementations and protocols with associated types. Along the way we will also show how concrete types can express things that are currently impossible with Swift protocols.</p><blockquote><p>translating protocols to concrete datatypes has revealed just how simple some of these seemingly complex features are. We could clear away the fog and see that a protocol feature is really just functions and composition and generics in disguise! Even the dreaded “Self or associated type” error becomes much less dreadful when you realize that it’s just a couple hidden generics.</p></blockquote><h2>Episode #37: Protocol-Oriented Library Design: Part 1</h2><p><a href="https://www.pointfree.co/episodes/ep37-protocol-oriented-library-design-part-1">Episode #37 • Nov 12, 2018 • Subscriber-Only</a></p><p>Perhaps the most popular approach to code reuse and extensibility in Swift is to liberally adopt protocol-oriented programming, and many Swift libraries are designed with protocol-heavy APIs. In today’s episode we refactor a sample library to use protocols and examine the pros and cons of this approach.</p><h2>Episode #38: Protocol-Oriented Library Design: Part 2</h2><p><a href="https://www.pointfree.co/episodes/ep38-protocol-oriented-library-design-part-2">Episode #38 • Nov 19, 2018 • Subscriber-Only</a></p><p>With our library fully generalized using protocols, we show off the flexibility of our abstraction by adding new conformances and functionality. In fleshing out our library we find out why protocols may not be the right tool for the job.</p><p>Snapshotting views as strings.</p><h2>Episode #39: Witness-Oriented Library Design</h2><p><a href="https://www.pointfree.co/episodes/ep39-witness-oriented-library-design">Episode #39 • Nov 26, 2018 • Subscriber-Only</a></p><p>We previously refactored a library using protocols to make it more flexible and extensible but found that it wasn’t quite as flexible or extensible as we wanted it to be. This week we re-refactor our protocols away to concrete datatypes using our learnings from earlier in the series.</p><h2>Episode #40: Async Functional Refactoring</h2><p><a href="https://www.pointfree.co/episodes/ep40-async-functional-refactoring">Episode #40 • Dec 17, 2018 • Subscriber-Only</a></p><p>The snapshot testing library we have been designing over the past few weeks has a serious problem: it can’t snapshot asynchronous values, like web views and anything that uses delegates or callbacks. Today we embark on a no-regret refactor to fix this problem with the help of a well-studied and well-understood functional type that we have discussed numerous times before.</p><p>Sync snapshotting web views fails, need async.</p><p>Async snapshotting. <code>Parallel</code> type.</p><p>Async pullback.</p><h2>Episode #41: A Tour of Snapshot Testing</h2><p><a href="https://www.pointfree.co/episodes/ep41-a-tour-of-snapshot-testing">Episode #41 • Dec 18, 2018 • Free Episode</a></p><p>Our snapshot testing library is now officially open source! In order to show just how easy it is to integrate the library into any existing code base, we add some snapshot tests to a popular open source library for attributed strings. This gives us the chance to see how easy it is to write all new, domain-specific snapshot strategies from scratch.</p><h2>Episode #86: SwiftUI Snapshot Testing</h2><p><a href="https://www.pointfree.co/episodes/ep86-swiftui-snapshot-testing">Episode #86 • Dec 23, 2019 • Free Episode</a></p><p>In this week’s free holiday episode we show what it looks like to snapshot test a SwiftUI application in our architecture and compare this style of integration testing against XCTest’s UI testing tools.</p><p>Snapshotting alerts (UIWindow, hosting application @11:44)</p><p><code>windowedImage</code> snapshotting strategy</p><p>Turning animation off and on. Not working for alerts.</p><p>...play a simple user script by sending actions to the store and then take screenshots of what the application looks like at each step of the way</p>]]></content:encoded></item><item><guid isPermaLink="true">https://igor1309.github.com/articles/2022/2022-08-22-no-desktop-dev</guid><title>Desktop-less Development</title><description>Swift development without desktop</description><link>https://igor1309.github.com/articles/2022/2022-08-22-no-desktop-dev</link><pubDate>Mon, 22 Aug 2022 10:10:00 +0000</pubDate><content:encoded><![CDATA[<h1>Desktop-less Development</h1><h2>New Repo</h2><p>Create new GitHub repo using GitHub website (mobile version works ok).<br>Enable “create <code>.gitignore</code>” option by selecting <code>Swift</code>.</p><h2>New Workflow</h2><p>Add new workflow via GitHub.com: in the repo Actions tab select <code>Skip this and set up a workflow yourself -&gt;</code> (suggested name is <code>swift-package-init.yml</code>) with the following content:</p><pre><code># <span class="type">This</span> <span class="keyword">is</span> a simple workflow to initialize swift package and commit it to the new branch

name: <span class="type">Swift Package Init</span>

# <span class="type">Controls</span> when the workflow will run
on:
  # <span class="type">Allows</span> you to run this workflow manually from the <span class="type">Actions</span> tab
  workflow_dispatch:

# <span class="type">A</span> workflow run <span class="keyword">is</span> made up of one or more jobs that can run sequentially or <span class="keyword">in</span> parallel
jobs:
  # <span class="type">This</span> workflow contains a single job to initialize swift package
  package_init:
    # <span class="type">The</span> type of runner that the job will run on
    runs-on: macos-latest

    # <span class="type">Steps</span> represent a sequence of tasks that will be executed <span class="keyword">as</span> part of the job
    steps:
      # <span class="type">Checks</span>-out your repository under <span class="property">$GITHUB_WORKSPACE</span>, so your job can access it
      - uses: actions/checkout@v3

      # <span class="type">Runs</span> a single command using the runners shell
      - name: <span class="type">Swift Package</span> <span class="keyword">init</span>
        run: swift package <span class="keyword">init</span>

      # <span class="type">Commit</span> changes made <span class="keyword">in</span> the workflow run directly to the repo
      - uses: <span class="type">EndBug</span>/add-and-commit@v9
        with:

          # <span class="type">If</span> this input <span class="keyword">is set</span>, the action will push the commit to a new branch with this name.
          # <span class="type">Default</span>: ‘’
          new_branch: swift-package-<span class="keyword">init</span>
</code></pre><p>Commit directly into the <code>main</code> branch.</p><h2>Initialize Swift Package</h2><p>Manually run <code>Swift Package Init</code> workflow from the <code>Actions</code> tab (select workflow and run).<br>After the workflow is successfully done you’ll have a swift package initialized in the repo root directory and committed to the <code>swift-package-init</code> branch. If the workflow fails, look into the workflow execution details for debugging.</p><p>Checkout <code>swift-package-init</code> branch. If everything looks good, merge to <code>main</code> and delete <code>swift-package-init</code> branch.</p><h2>Testing</h2><h3>Another Workflow</h3><h1>ADD WORKFLOW WITHOUT SCRIPT AS WELL</h1><p>Add another workflow (suggested name is <code>run_clean_build_test_script.yml</code>) with the following content:</p><pre><code># <span class="type">This</span> <span class="keyword">is</span> a simple workflow to run clean build test script

name: <span class="type">Run Clean Build Test Script</span>

# <span class="type">Controls</span> when the workflow will run
on:
  # <span class="type">Allows</span> you to run this workflow manually from the <span class="type">Actions</span> tab
  workflow_dispatch:

# <span class="type">A</span> workflow run <span class="keyword">is</span> made up of one or more jobs that can run sequentially or <span class="keyword">in</span> parallel
jobs:
  # <span class="type">This</span> workflow contains a single job to call clean build test script
  run_clean_build_test_script:
    # <span class="type">The</span> type of runner that the job will run on
    runs-on: macos-latest

    # <span class="type">Steps</span> represent a sequence of tasks that will be executed <span class="keyword">as</span> part of the job
    steps:
    # <span class="type">Checks</span>-out your repository under <span class="property">$GITHUB_WORKSPACE</span>, so your job can access it
    - uses: actions/checkout@v3
    
    # <span class="type">Change</span> script file permissions
    - name: <span class="type">Make</span> executeable
      run: chmod +x ./.<span class="property">github</span>/scripts/clean_build_test.<span class="property">sh</span>
    
    - name: <span class="type">Run Clean Build Test Script</span>
      run: exec ./.<span class="property">github</span>/scripts/clean_build_test.<span class="property">sh</span>
</code></pre><p>That’s right, it’s referencing <code>clean_build_test.sh</code> script that we will create on the next step.</p><p>Commit to <code>main</code> and move to the next step.</p><h3>Add Script</h3><p>Using <code>Working Copy</code> app create sub-directory <code>scripts</code> in the <code>.gitgub</code> directory (I find it’s convenient to separate workflows and scrips).</p><p>Add new file <code>clean_build_test.sh</code> to <code>scripts</code> with the following contents:</p><pre><code>#!/bin/bash

# <span class="type">Run Swift</span> clean build and test

# <span class="type">Do</span> not forget to make this file executable with `chmod +x the_file_name`

# `set -o pipefail` causes a pipeline (for example,
# `curl -s https://sipb.<span class="property">mit</span>.<span class="property">edu</span>/ | grep foo`) to produce
# a failure <span class="keyword">return</span> code <span class="keyword">if</span> any command errors.
# <span class="type">Normally</span>, pipelines only <span class="keyword">return</span> a failure <span class="keyword">if</span> the last command errors.
# <span class="type">In</span> combination with `set -e`, this will make your script exit
# <span class="keyword">if</span> any command <span class="keyword">in</span> a pipeline errors.
<span class="keyword">set</span> -eo pipefail

swift package clean

swift build

swift test
</code></pre><p>Commit to <code>main</code>.</p><h3>Run Tests</h3><p>On <code>Actions</code> tab select <code>Run Clean Build Test Script</code> workflow tab and run it.</p><p>Inspect logs if the workflow failed.</p><h3>Test Failing Test</h3><p>Add new test function <code>testFailing()</code> to the <code>XCTestCase</code> subclass in swift test file in the Swift Package test target:</p><pre><code><span class="keyword">func</span> testFailing() {
    <span class="type">XCTFail</span>(“<span class="type">Testing</span> failing test”)
}
</code></pre><p>Commit to <code>main</code> and run <code>Run Clean Build Test Script</code> workflow to see it failing. Inspecting workflow run log will show you that failing test is the reason for workflow failure.</p><p>Remove <code>testFailing</code> function. Commit and run workflow again to see passing tests.</p><h2>CI</h2><p>We’ll add a check that would be triggered automatically every time a pull request into the <code>main</code> branch is opened (it highly advised to protect your significant branch(es) by enabling at least “Require a pull request before merging” flag in repo Settings/Branches/Branch protection rules).</p><p>First, add new <code>ci.yml</code> file to <code>.github/workflows</code>:</p><pre><code># <span class="type">This</span> workflow runs when a pull request into the `main` branch <span class="keyword">is</span> created

name: <span class="type">CI</span>

# <span class="type">Controls</span> when the workflow will run
on:
  # <span class="type">Run</span> this workflow <span class="keyword">if</span> pull request into branch `main` is created
  pull_request:
    types:
      - opened
    branches:
      - main

# <span class="type">A</span> workflow run <span class="keyword">is</span> made up of one or more jobs that can run sequentially or <span class="keyword">in</span> parallel
jobs:
  # <span class="type">This</span> workflow contains a single job
  ci:
    # <span class="type">Calls</span> reusable workflow <span class="type">Run Clean Build Test</span>
      uses: ./.<span class="property">github</span>/workflows/run_clean_build_test_script.<span class="property">yml</span>
</code></pre><p>Note that this workflow would run when pull request is created. In order to auto run it when more commits are added or other pull request events, remove <em>type: - open</em>:</p><pre><code>pull_request:
    types:     # remove this line
      - opened # remove this line
</code></pre><p>Second, add <code>workflow_call</code> (# 2) after <code>workflow_dispatch</code> (# 1) in <code>run_clean_build_test_script.yml</code>:</p><pre><code># <span class="type">Controls</span> when the workflow will run
on:
  # <span class="type">Allows</span> you to run this workflow manually from the <span class="type">Actions</span> tab
  workflow_dispatch: # <span class="number">1</span>
  
  # <span class="type">Allows</span> to reuse this workflow (call from workflows)
  workflow_call:     # <span class="number">2</span>

</code></pre><p>This would make <code>Run Clean Build Test Script</code> workflow reusable, i.e., callable from another workflow, as we do in <code>CI</code> (<code>ci.yml</code>).</p><p>Commit both changes to <code>main</code>.</p><p>Checkout new branch <code>feature</code>, add empty new file to <code>Sources</code> folder , commit to <code>feature</code> branch, make pull request into <code>main</code>.</p><p>In the <code>Pull requests</code> tab (github.com) you’ll see check(s) running for the new open pull request, at least your <code>CI</code> with clean build and test. Merge pull request, remove <code>feature</code> branch. Remove local branch(es) other than main in <code>Working Copy</code>.</p><h2>Features and Fixes</h2><p>Edit <code>ci.yml</code> - add the following after <code>branches: main</code>:</p><pre><code>on:
  # <span class="type">Run</span> this workflow <span class="keyword">if</span> pull request into branch `main` is created
  pull_request:
    types:
      - opened
    branches:
      - main
 
  # <span class="type">Triggers</span> the workflow on push events but only <span class="keyword">for</span> the `feature` or `fix` branches
  push:
    branches: 
      - ‘feature/**’
      - ‘fix/**’
</code></pre><p>Now you’re good to go with development without desktop 😎.</p><p>Just follow:</p><ul><li>checkout <code>feature/featureX</code> or <code>fix/fixX</code> branch,</li><li>use <strong>TDD</strong> to write tests and production code,</li><li>push to remote</li><li>create pull requests into <code>main</code> if workflows run green.</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://igor1309.github.com/articles/2022/2022-08-20-fastlane-screenshots</guid><title>Automating app screenshots and previews for the App Store with Snapshotting and fastlane</title><description>Automating app screenshots and previews for the App Store with Snapshotting and fastlane</description><link>https://igor1309.github.com/articles/2022/2022-08-20-fastlane-screenshots</link><pubDate>Sat, 20 Aug 2022 10:10:00 +0000</pubDate><content:encoded><![CDATA[<h1>Automating app screenshots and previews for the App Store with Snapshotting and fastlane</h1><p>Table of contents</p><ul><li>The problem</li><li>Solution: Automation<ul><li>Prepare screenshots<ul><li>SwiftUI views for app previews or screenshots -</li></ul></li><li>Make screenshots<ul><li>Device sizes</li><li>Languages</li><li>Git LFS for images</li></ul></li></ul></li></ul><ul><li>Publish to App Store with fastlane</li></ul><p>Manually managing <em>screenshots</em> and <em><a href="https://developer.apple.com/app-store/app-previews/">app previews</a></em> for your app is quite a pain. You have to provide at least one screenshot for every device size and app previews are optional. (App Radar has a <a href="https://appradar.com/blog/ios-app-screenshot-sizes-and-guidelines-for-the-apple-app-store">nice summary</a> of guidelines and requirements.)</p><p>The good thing is that the number of device sizes is smaller than the number of all iPhones and iPads (plus Watches, plus Apple TVs) - take a look at <a href="https://help.apple.com/app-store-connect/#/devd274dd925">Screenshot specifications</a> and <a href="https://help.apple.com/app-store-connect/#/dev4e413fcb8">App preview specifications</a>, but still it’s 🤯 for manual work.</p><p>And don’t forget about localization - the rules apply for every language in you app (“Fun with flags”©).</p><p>So, it great that fastlane has this covered (i.e. automated) with screenshot and framing.</p><p>Too bad it needs <code>UI Tests</code>. They are flaky and unreliable, they are very very slow, and most importantly they are quite difficult to implement (and test all possible states/paths). Imagine the screen somewhere at the end of the flow — you have to navigate there by “tapping” in code. It’s good if you have uses accessibility tools that would help you to identify controls, but what about data? Should you talk to the backend? Staged or production? What if it’s down? Use the database? What if you have changed the navigation? Easy, you say, just use <code>launch arguments</code>. Sure. And we just added another layer of complexity to manage and maintain and remember (that’s why companies rely heavily on manual testing and have lots of QAs), not to mention bad practice of polluting production code with code intended just for tests. So much just to get one screenshot. And you need like hundreds.</p><p>My favorite thing about reactive programming is thinking about and implementing a view as <em>dumb</em> object - the one that has no behavior, just rendering the state.</p><p>If we design UI components like this, we could easily test the rendering of any possible state. And instead of UI tests we would use snapshot tests - much faster, super flexible (just pass the state you want to render), super easy to manage and maintain. We won’t worry about navigation, networking, persistence, etc - state rendering is totally decoupled from all these components.</p><p>With this in mind we’d create a test target <code>ScreenshotTests</code> and run test (to make screenshots) for just the views (UI components) showing exactly what we want that we’d like to add to the App Store. CHANGE WORDING</p><p>State -&gt; View -&gt; Snapshot -&gt; PNG-file -&gt; fastlane</p><p>Run this flow for every device size and every language we need.</p><pre><code><span class="keyword">struct</span> DeviceConfig {
    <span class="keyword">enum</span> Orientation {
        <span class="keyword">case</span> landscape
        <span class="keyword">case</span> portrait
    }

    <span class="comment">// ...</span>

    <span class="keyword">static let</span> iPhone13Pro: <span class="type">Self</span> = .<span class="call">iPhone13Pro</span>(.<span class="dotAccess">portrait</span>)

    <span class="keyword">static func</span> iPhone13Pro(<span class="keyword">_</span> orientation: <span class="type">Orientation</span>) {
        <span class="comment">// ...</span>
    }
}

<span class="keyword">extension</span> <span class="type">Locale</span> {
    <span class="keyword">static let</span> enUS: <span class="type">Self</span> = .<span class="keyword">init</span>(identifier: “en_US”)
}

<span class="keyword">extension</span> <span class="type">XCTestCase</span> {
    <span class="keyword">func</span> snapshot(
        <span class="keyword">_</span> view: any <span class="type">View</span>,
        config: <span class="type">DeviceConfig</span>,
        locale: <span class="type">Locale</span>,
        colorScheme: <span class="type">ColorScheme</span>
    ) {
        <span class="keyword">let</span> view = view
            .<span class="call">environment</span>(\.<span class="property">locale</span>, locale)
            .<span class="call">preferredColorScheme</span>(colorScheme)
        <span class="comment">// ...</span>
    }
}
</code></pre><h2>References</h2><ul><li><a href="https://www.youtube.com/watch?v=tk0HzScvW2M">Testing and Declarative UI's - Nataliya Patsovska</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://igor1309.github.com/articles/2022/2022-08-16-ci-cd</guid><title>CI/CD</title><description>Continuous Integration/Continuous Deployment</description><link>https://igor1309.github.com/articles/2022/2022-08-16-ci-cd</link><pubDate>Tue, 16 Aug 2022 10:10:00 +0000</pubDate><content:encoded><![CDATA[<h1>CI/CD</h1><h1>CI</h1><ul><li><a href="https://www.raywenderlich.com/books/ios-app-distribution-best-practices/v1.0/chapters/14-continuous-integration">iOS App Distribution &amp; Best Practices, Chapter 14: Continuous Integration | raywenderlich.com</a></li></ul><h2>App Store Connect</h2><ul><li><a href="https://developer.apple.com/documentation/appstoreconnectapi/creating_api_keys_for_app_store_connect_api">Creating API Keys for App Store Connect API | Apple Developer Documentation</a></li></ul><p>Create API keys you use to sign JWTs and authorize API requests.</p><h2>GitHub</h2><ul><li><a href="https://docs.github.com/en/actions/security-guides/encrypted-secrets">Encrypted secrets - GitHub Docs</a></li></ul><ul><li><a href="https://www.cobeisfresh.com/blog/how-to-implement-a-ci-cd-workflow-for-ios-using-github-actions">How to Implement a CI/CD Workflow for iOS Using GitHub Actions</a></li></ul><ul><li><a href="https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows">Events that trigger workflows - GitHub Docs</a></li></ul><ul><li><a href="https://docs.github.com/en/actions/using-workflows/triggering-a-workflow#using-filters-to-target-specific-branches-or-tags-for-push-events">Using filters to target specific branches or tags for push events</a></li></ul><ul><li><a href="https://docs.github.com/en/actions/using-workflows/about-workflows#creating-dependent-jobs">Creating dependent jobs</a></li></ul><ul><li><a href="https://docs.github.com/en/actions/using-workflows/reusing-workflows">Reusing workflows - GitHub Docs</a><ul></ul></li></ul><p>Learn how to avoid duplication when creating a workflow by reusing existing workflows.<br> <a href="https://docs.github.com/en/actions/using-workflows/reusing-workflows#limitations">Limitations</a><br> <a href="https://docs.github.com/en/actions/using-workflows/reusing-workflows#using-inputs-and-secrets-in-a-reusable-workflow">Using inputs and secrets in a reusable workflow</a><br><br> Unlike when you are using actions within a workflow, you call reusable workflows directly within a job, and not from within job steps.</p><ul><li><a href="https://docs.github.com/en/actions/hosting-your-own-runners">Hosting your own runners - GitHub Docs</a></li></ul><h2>Secrets</h2><ul><li><a href="https://www.raywenderlich.com/books/ios-app-distribution-best-practices/v1.0/chapters/11-managing-secrets">iOS App Distribution &amp; Best Practices, Chapter 11: Managing Secrets | raywenderlich.com</a></li></ul><h2>Code Signing &amp; Provisioning</h2><ul><li><a href="https://www.raywenderlich.com/books/ios-app-distribution-best-practices/v1.0/chapters/4-code-signing-provisioning">iOS App Distribution &amp; Best Practices, Chapter 4: Code Signing &amp; Provisioning | raywenderlich.com</a></li></ul><h2>fastlane</h2><ul><li><a href="https://www.raywenderlich.com/books/ios-app-distribution-best-practices/v1.0/chapters/13-introduction-to-fastlane">iOS App Distribution &amp; Best Practices, Chapter 13: Introduction to Fastlane | raywenderlich.com</a></li></ul><ul><li><a href="https://www.raywenderlich.com/11744293-fastlane-tutorial-actions-and-plugins">fastlane Tutorial: Actions and Plugins | raywenderlich.com</a></li></ul><h2>Tutorials</h2><ul><li><a href="https://engineering.talkdesk.com/test-and-deploy-an-ios-app-with-github-actions-44de9a7dcef6">Test and deploy an iOS App with GitHub Actions | by Tiago Santo | Talkdesk Engineering</a></li></ul><ul><li><a href="https://www.runway.team/blog/how-to-set-up-a-ci-cd-pipeline-for-your-ios-app-fastlane-github-actions">How to set up a CI/CD pipeline for your iOS app using fastlane and GitHub Actions | Runway</a></li></ul><ul><li><a href="https://www.runway.team/blog/how-to-build-the-perfect-fastlane-pipeline-for-ios">How to build the perfect fastlane pipeline for iOS | Runway</a></li></ul><h2>More</h2><ul><li><a href="https://www.raywenderlich.com/books/ios-app-distribution-best-practices/v1.0/chapters/12-build-automation">iOS App Distribution &amp; Best Practices, Chapter 12: Build Automation | raywenderlich.com</a></li></ul><h2>Issues &amp; Solutions</h2><ul><li>Unauthorized Access (using 2FA)</li></ul><p>delete the <code>~/.fastlane/spaceship/{email}/cookie</code></p><p>remove the credentials by <code></code>`bash fastlane fastlane-credentials remove --username YOUR_APPLEID <code></code>`<br> <a href="https://github.com/fastlane/fastlane/tree/master/credentials_manager">fastlane/credentials_manager at master · fastlane/fastlane</a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://igor1309.github.com/articles/2022/2022-08-03-unit-test-tips</guid><title>Unit Tests (tips)</title><description>Short tips on unit tests</description><link>https://igor1309.github.com/articles/2022/2022-08-03-unit-test-tips</link><pubDate>Wed, 3 Aug 2022 10:10:00 +0000</pubDate><content:encoded><![CDATA[<h1>Unit Tests (tips)</h1><ol><li>Test the behavior, not the implementation.</li></ol><ol start="2"><li>Use DSL helpers to simplify tests and decouple them from the implementation.</li></ol>]]></content:encoded></item><item><guid isPermaLink="true">https://igor1309.github.com/articles/2022/2022-08-01-fill-hole</guid><title>Hole Filling</title><description>Take home Fill Hole assignment.</description><link>https://igor1309.github.com/articles/2022/2022-08-01-fill-hole</link><pubDate>Mon, 1 Aug 2022 10:10:00 +0000</pubDate><content:encoded><![CDATA[<h1>Hole Filling</h1><p>This was a take home test.</p><blockquote><p>The goal of this task is to build a small image processing library that fills holes in images, along with a small command line utility that uses that library, and answer a few questions.</p></blockquote><p>See detailed assignment in <a href="../../../images/fill-hole/Hole%20Filling%203%20-%20Interview%20Exercise.pdf">Hole Filling 3 - Interview Exercise.pdf</a>.</p><h2>Goals</h2><ol><li>Solve the assignment.</li><li>Demonstrate the ultra-modular design of decoupled composable components.</li></ol><br/><div align="center">
<img src="../../../images/fill-hole/Lenna.png" width="60%" title="Lenna">
<br/>
<p align="center"><cite>Lenna.png</cite></p>
</div><br/><h2>CLI</h2><p>To see in action change your current console directory to <code>fill-hole</code> Swift Package folder and run the following command</p><pre><code>$ swift run fill-hole -h
</code></pre><p>to see <code>fill-hole</code> command line <em>description and arguments</em>:</p><pre><code><span class="type">OVERVIEW</span>: <span class="type">Image Hole Filler</span>.

`fill-hole` is a command line utility that fills the hole <span class="keyword">in</span> the image.
<span class="type">Provide URLs</span> <span class="keyword">for</span> the source image and hole (mask), parameters of the weight function `z` and `e`, and (optional) output
image file name.

<span class="type">USAGE</span>: fill-hole &lt;source&gt; &lt;mask&gt; &lt;z&gt; &lt;e&gt; &lt;connectivity&gt; [&lt;output-file&gt;]

<span class="type">ARGUMENTS</span>:
  &lt;source&gt;                <span class="type">Source</span> image <span class="type">URL</span>.
  &lt;mask&gt;                  <span class="type">Hole</span> (mask) image <span class="type">URL</span>.
  &lt;z&gt;                     `z` parameter of the weight function.
  &lt;e&gt;                     `e` parameter of the weight function: small float value used to avoid division by zero.
  &lt;connectivity&gt;          <span class="type">Pixel</span> connectivity type: <span class="number">4</span> or <span class="number">8</span>.
  &lt;output-file&gt;           (<span class="type">Optional</span>) name of output file without extension. <span class="type">The</span> command only writes to the current
                          directory. (default: output)

<span class="type">OPTIONS</span>:
  -h, --help              <span class="type">Show</span> help information.
</code></pre><p>Output file name could be omitted, its extension, if provided, is ignored (for simplicity of v.001).</p><p>Run the following command:</p><pre><code>$ swift run fill-hole &lt;image url&gt; &lt;hole url&gt; <span class="number">2 0.001 4</span>
</code></pre><p>Drag-n-drop image file instead of <code>&lt;image url&gt;</code>, and mask (hole) file for <code>&lt;hole url&gt;</code>.</p><p>If you miss any argument you'll see an error, for example:</p><pre><code><span class="type">Error</span>: <span class="type">Missing</span> expected argument '&lt;connectivity&gt;'
<span class="type">Help</span>:  &lt;connectivity&gt;  <span class="type">Pixel</span> connectivity type: <span class="number">4</span> or <span class="number">8</span>.
<span class="type">Usage</span>: fill-hole &lt;source&gt; &lt;mask&gt; &lt;z&gt; &lt;e&gt; &lt;connectivity&gt; [&lt;output-file&gt;]
  <span class="type">See</span> 'fill-hole --help' <span class="keyword">for</span> more information.
</code></pre><p>URLs of the source, mask, and output would be printed when the command finishes successfully. Run <code>ls</code> to list folder contents, including the output image:</p><pre><code>$ ls
<span class="type">Package</span>.<span class="property">resolved</span>	<span class="type">README</span>.<span class="property">md</span>		<span class="type">Tests</span>			output.<span class="property">png</span>
<span class="type">Package</span>.<span class="property">swift</span>		<span class="type">Sources</span>			docs
</code></pre><p>Run <code>open output.png</code> to open it.</p><h2>Package Structure</h2><p>The solution is implemented using <em>Swift Package</em>.</p><p>To simplify reasoning, have clear responsibilities, and construct decoupled components, we divided the codebase into the following targets inside one Swift Package:</p><ul><li><code>fill-hole</code> (executable target)</li><li><code>FillHoleCommand</code></li><li><code>FillHoleLib</code></li><li><code>GrayscaleIOLib</code></li></ul><br/><div align="center">
<image src="../../../images/fill-hole/package.png" width="100%" title="Swift Package">
<br/>
<p align="center"><cite>Swift Package</cite></p>
</div><br/><p><code>FillHoleCommand</code>, <code>FillHoleLib</code>, and <code>GrayscaleIOLib</code> are accompanied by tests in their respective test targets.</p><h2>Modules</h2><p>Here is the top-level view of modules and dependencies:</p><br/><div align="center">
<image src="../../../images/fill-hole/modules.png" width="100%" title="Modules">
<br/>
<p align="center"><cite>Modules</cite></p>
</div><br/><p>Here is more detailed view with components:</p><br/><div align="center">
<image src="../../../images/fill-hole/components.png" width="100%" title="Components">
<br/>
<p align="center"><cite>Components</cite></p>
</div><br/><ul><li>Command line utility <code>fill-hole</code> is a simple thin executable wrapper for the <code>FillHoleCommand</code>.</li></ul><ul><li><code>FillHoleCommand</code></li></ul><p><code>FillHoleCommand</code> accepts an <code>input image</code> file, <code>hole</code> (mask) file, weight function parameters <code>𝑧</code> and <code>ε</code>, and <code>connectivity</code> type, fills the hole and writes the result to an output image file.</p><p>It's implemented using <a href="https://github.com/apple/swift-argument-parser">Swift Argument Parser</a> by Apple.</p><p><code>FillHoleCommand</code> as a <code>ParsableCommand</code> uses its default implementation of the static func <code>main()</code>. To preserve the functionality and compatibility, there is no way of using constructor injection with <code>FillHoleCommand</code>. As a compromise, we use implicit dependencies (<code>Valuator</code> and <code>Runner</code>) considering <code>FillHoleCommand</code> a <strong>composition layer</strong>, that wraps <code>Valuator</code> and <code>Runner</code> logic.</p><p><code>Valuator</code> and <code>Runner</code> use constructor injection with polymorphic interfaces, so we can easily swap their dependencies.</p><p>The <code>FillHoleCommand</code> doesn’t support an arbitrary weight function, only the default one with configurable 𝑧 and ε.</p><ul><li><code>FillHoleLib</code></li></ul><p><code>FillHoleLib</code> is a module with algorithm for hole filling. Its two main components are <code>HoleFiller</code> and <code>Balance</code>.</p><p><code>HoleFiller</code> is initialized with <code>PixelConnectivity</code> and <code>Balance</code> and has a function to <code>fill</code> the hole in the image.</p><p><code>Balance</code> holds <code>WeightFunc</code>, either arbitrary or <code>default</code> weighting function<br> <code></code>` 1 / (||u - v||^z + ε), <code></code>` where <code>ε (epsilon)</code> is a small float value used to avoid division by zero, and <code>||u - v||</code> denotes the euclidean distance between <code>u</code> and <code>v</code>.</p><ul><li><code>GrayscaleIOLib</code></li></ul><p>This is not a generic file IO operations suite, but a very concrete case of loading grayscale images from files and saving such images using <code>ImageIO</code>, the performant API from Apple (<a href="https://developer.apple.com/documentation/imageio/cgimagesource"><code>CGImageSource</code></a>, <a href="https://developer.apple.com/documentation/imageio/cgimagedestination/"><code>CGImageDestination</code></a>).</p><h2>Questions</h2><blockquote><p>1. If there are 𝑚 boundary pixels and 𝑛 pixels inside the hole, what’s the complexity of the algorithm that fills the hole, assuming that the hole and boundary were already found? Try to also express the complexity only in terms of 𝑛.</p></blockquote><ul><li><code>O(n * m)</code></li><li><code>O(n * √n)</code> - idea: <code>n</code> is like the area of the hole, and <code>m</code> is the perimeter, so O(m) ≃ O(√n).</li></ul><blockquote><p>(a) Could you imagine the case where it would be <code>O(n * n)</code>?</p></blockquote><ul><li>Yes, consider long thin rectangle - its perimeter would be <code>~O(n)</code> and overall complexity would be <code>O(n²)</code>.</li></ul><blockquote><p>2. Describe an algorithm that approximates the result in 𝑂(𝑛) to a high degree of accuracy. Bonus: implement the suggested algorithm in your library in addition to the algorithm described above.</p></blockquote><p>We could change each hole pixel color to the average color of the boundary. In this case, the complexity would be <code>O(n + m)</code>, where <code>m &lt; n</code>, which is equivalent to <code>O(n)</code>.</p><p>A more granular approach would be the following: divide the boundary into k sets of pixels, calculate average color and "average" coordinates for each set thus creating a set of pixels <code>newBoundary</code>, and run the basic algorithm against the original hole and newBoundary.<br>Complexity:<br>- Creating newBoundary of <code>k</code> pixels from the original boundary of <code>m</code> pixels: <code>m</code> - Filling the hole: <code>k * n</code> - Total <code>O(m) + O(k * n) ≲ O(n)</code></p><blockquote><p>3. Bonus (hard!): Describe and implement an algorithm that finds the exact solution in 𝑂(𝑛𝑙𝑜𝑔𝑛). In this section, feel free to use any algorithmic functionality provided by external libraries as needed.</p></blockquote><p>In this case I would think about gradually shrinking boundary and hole:</p><pre><code><span class="comment">// pixelConnectivity: PixelConnectivity is given</span>
<span class="keyword">let</span> neighborhood: (<span class="type">Pixel</span>) -&gt; [<span class="type">Pixel</span>] = { pixel <span class="keyword">in</span>
    pixelConnectivity.<span class="call">neighbours</span>(of: pixel)
}

<span class="comment">// copy already found boundary: Boundary = Set&lt;Pixel&gt;</span>
<span class="keyword">var</span> boundary = boundary
<span class="comment">// copy existing hole: Hole = Set&lt;Pixel&gt;</span>
<span class="keyword">var</span> hole = hole

<span class="keyword">while</span> !hole.<span class="call">isEmpty</span> {
    <span class="keyword">let</span> neighbours = boundary.<span class="call">map</span>(neighborhood).<span class="call">reduce</span>([], +))
    <span class="comment">// boundary shrinking inwards</span>
    <span class="keyword">let</span> newBoundary = <span class="type">Set</span>(neighbours).<span class="call">intersection</span>(hole)
    newBoundary.<span class="call">forEach</span> { pixel <span class="keyword">in</span>
        <span class="comment">// paint pixel using neighbours in boundary
        // ...</span>
    }

    hole = hole.<span class="call">subtract</span>(newBoundary)
    boundary = newBoundary
}
</code></pre><h2>A note for the (near) future</h2><p>The upcoming <code>macOS13</code> is able to work with <code>async</code> commands, i.e. <code>FillHoleCommand.main()</code> would be able to run asynchronously.</p><h2>Repo</h2><p>Public repo is <a href="https://github.com/igor1309/fill-hole-public">on the Github</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://igor1309.github.com/articles/2022/2022-07-29-lightricks-on-image-processing</guid><title>Lightricks on Image Processing</title><description>Interesting posts on Image Processing by Lightricks</description><link>https://igor1309.github.com/articles/2022/2022-07-29-lightricks-on-image-processing</link><pubDate>Fri, 29 Jul 2022 10:10:00 +0000</pubDate><content:encoded><![CDATA[<h1>Lightricks on Image Processing</h1><ul><li><a href="https://medium.com/@lightricks-tech-blog/efficient-image-processing-in-ios-part-1-f15d6dfcab44">Image properties and efficient processing in iOS, part 1 | Medium</a></li></ul><ul><li><a href="https://medium.com/@lightricks-tech-blog/efficient-image-processing-in-ios-part-2-a96f0343e6f0">Image properties and efficient processing in iOS, part 2 | Medium</a></li></ul><ul><li><a href="https://medium.com/@lightricks-tech-blog/an-intro-to-color-spaces-and-how-i-used-them-for-my-game-f712153b114">Additive color model and color spaces explained | Medium</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://igor1309.github.com/articles/2022/2022-07-24-cli</guid><title>Command Line Utility: Useful Links</title><description>Useful links about command line utility and `ArgumentParser`</description><link>https://igor1309.github.com/articles/2022/2022-07-24-cli</link><pubDate>Sun, 24 Jul 2022 10:10:00 +0000</pubDate><content:encoded><![CDATA[<h1>Command Line Utility: Useful Links</h1><h2><code>ArgumentParser</code></h2><ul><li><a href="https://www.fivestars.blog/articles/a-look-into-argument-parser/">A Look Into ArgumentParser | FIVE STARS</a></li><li><a href="https://rderik.com/blog/understanding-the-swift-argument-parser-and-working-with-stdin/">Understanding the Swift Argument Parser and working with STDIN</a></li><li><a href="https://betterprogramming.pub/advanced-argument-parsing-for-a-swift-based-cli-application-6f42ac09e838">Advanced Argument Parsing for a Swift-Based CLI Application | by Riccardo Cipolleschi | Better Programming</a></li><li><a href="https://www.youtube.com/watch?v=pQt71tLmiac">Swift CommandLine with ArgumentParser - YouTube</a></li></ul><h4>Apple documentation</h4><ul><li><a href="https://github.com/apple/swift-argument-parser">apple/swift-argument-parser: Straightforward, type-safe argument parsing for Swift</a></li><li><a href="https://apple.github.io/swift-argument-parser/documentation/argumentparser/gettingstarted/">Getting Started with ArgumentParser | Documentation</a></li><li><a href="https://apple.github.io/swift-argument-parser/documentation/argumentparser/declaringarguments/">Declaring Arguments, Options, and Flags | Documentation</a></li><li><a href="https://apple.github.io/swift-argument-parser/documentation/argumentparser/">ArgumentParser | Documentation</a></li><li><a href="https://apple.github.io/swift-argument-parser/documentation/argumentparser/parsablecommand/">ParsableCommand | Documentation</a></li><li><a href="https://github.com/apple/swift-argument-parser/tree/main/Examples">swift-argument-parser/Examples at main · apple/swift-argument-parser</a></li></ul><h4>"Writing Command Line Tools in Swift Using ArgumentParser" by Andy Ibanez</h4><ul><li><a href="https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part1/">Part 1: Introduction &amp; Basic Usage • Andy Ibanez</a></li><li><a href="https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part2/">Part 2: Validation &amp; Errors • Andy Ibanez</a></li><li><a href="https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part3/">Part 3: Subcommands • Andy Ibanez</a></li><li><a href="https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part4/">Part 4: Customizing Help • Andy Ibanez</a></li><li><a href="https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part5/">Part 5: Tools with Asynchronous APIs • Andy Ibanez</a></li><li><a href="https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part6/">Part 6: Releasing And Installing Our Command Line Tool • Andy Ibanez</a></li></ul><h2>Async CLI</h2><ul><li><a href="https://blog.eidinger.info/develop-a-command-line-tool-using-swift-concurrency">Develop a command-line tool using Swift Concurrency</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://igor1309.github.com/articles/2022/2022-07-07-swift-concurrency</guid><title>Swift Concurrency</title><description>Swift Concurrency - essential links</description><link>https://igor1309.github.com/articles/2022/2022-07-07-swift-concurrency</link><pubDate>Thu, 7 Jul 2022 10:10:00 +0000</pubDate><content:encoded><![CDATA[<h1>Swift Concurrency</h1><ul><li><a href="https://peterfriese.dev/posts/swiftui-concurrency-essentials-part1/#calling-asynchronous-code-from-swiftui-">Getting Started with async/await in SwiftUI - SwiftUI Concurrency Essentials | Peter Friese</a></li></ul><h2>Task Cancellation</h2><ul><li><a href="https://peterfriese.dev/posts/swiftui-concurrency-essentials-part2/">Cooperative Task Cancellation - SwiftUI Concurrency Essentials | Peter Friese</a></li></ul><h2>Task Group</h2><ul><li><a href="https://trycombine.com/posts/swift-concurrency-task-group-workflow/">TaskGroup as a workflow design tool</a> *</li></ul><h2>Combine and Swift Concurrency</h2><ul><li><a href="https://peterfriese.dev/posts/combine-vs-async/">Asynchronous programming with SwiftUI and Combine - The Future of Combine and async/await | Peter Friese</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://igor1309.github.com/articles/2022/2022-07-02-swiftui-redacted</guid><title>The Redacted View Modifier in SwiftUI</title><description>The Redacted View Modifier in SwiftUI</description><link>https://igor1309.github.com/articles/2022/2022-07-02-swiftui-redacted</link><pubDate>Sat, 2 Jul 2022 10:10:00 +0000</pubDate><content:encoded><![CDATA[<h1>The Redacted View Modifier in SwiftUI</h1><ul><li><a href="https://serialcoder.dev/text-tutorials/swiftui/the-redacted-view-modifier-in-swiftui/?utm_campaign=%20SwiftUI%20Weekly&utm_medium=email&utm_source=Revue%20newsletter">The Redacted View Modifier in SwiftUI – SerialCoder.dev</a></li></ul><ul><li><a href="https://www.avanderlee.com/swiftui/redacted-view-modifier/">How to use the Redacted View Modifier in SwiftUI with useful extensions</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/swiftui/redactionreasons">RedactionReasons | Apple Developer Documentation</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://igor1309.github.com/articles/2022/2022-06-30-job</guid><title>Job search, application, interviews, salary, and offer negotiations</title><description>A collection of links and brief notes about job search, job application, technical and behavioral interviews, salary, and offer negotiations.</description><link>https://igor1309.github.com/articles/2022/2022-06-30-job</link><pubDate>Thu, 30 Jun 2022 10:10:00 +0000</pubDate><content:encoded><![CDATA[<h1>Job search, application, interviews, salary, and offer negotiations</h1><p>Get yourself prepared and move smart.</p><p><em>This post is not intended to be read, it is a reference that holds sketchy notes and bookmarks.</em></p><h2>Job search</h2><p>Profile your future job</p><h3>What</h3><p>Job title(s), role(s), position(s)</p><h3>Where</h3><p>Company:</p><ul><li>Size</li><li>Industry</li></ul><p>Country</p><p>On-site/remote/hybrid</p><p>You can have multiple profiles. The more you define your profile the better search results you’ll get.</p><h3>How</h3><p>Where to find job postings: job boards, company websites (career or jobs pages), <a href="https://www.linkedin.com/">LinkedIn</a></p><ul><li><a href="https://t.me/digitalbroccoli/2358">Top job boards (short list)</a></li><li><a href="https://s7863364.sendpul.se/a360/public/statistic/v1/click/099770723a8844e3d361024d2b3063c0">Top-50 job search websites</a></li><li><a href="https://t.me/agilefluent/256">Job search by specialty</a></li><li>Nice but limited <a href="https://otta.com/">Otta | The better way to find a job in tech</a></li><li><a href="https://topstartups.io/">Top Startups 2022 — Funded by Sequoia, Y Combinator, A16Z, Accel</a></li></ul><h2>Salary negotiation (I)</h2><p>Yes, it starts here, - you should be prepared <strong>before</strong> the job application.</p><ul><li><a href="https://fearlesssalarynegotiation.com/salary-expectations-interview-question/">Salary expectations questions - How should you answer them? | Fearless Salary Negotiation</a></li><li><a href="https://haseebq.com/how-not-to-bomb-your-offer-negotiation/">How Not to Bomb Your Offer Negotiation - haseeb qureshi</a></li><li><a href="https://cultivatedculture.com/salary-negotiation/">How to Negotiate Salary During an Interview - Cultivated Culture</a></li></ul><h2>Job application</h2><h3>CV</h3><p>Create CV for each job you apply.</p><ul><li><a href="https://www.breakinto.tech/blog/2015/12/2/unplug-from-the-matrix-aka-how-to-win-the-resume-game">Unplug from the Matrix AKA “How to Win the Resume Game” | Break into Tech</a></li><li><a href="https://t.me/onemoreinterviewbot">@onemoreinterviewbot (Russian)</a></li><li><a href="https://t.me/agilefluent/258">Разбор резюме</a></li><li><a href="https://www.jobscan.co/">Jobscan: Optimize your resume to get more interviews</a></li><li><a href="https://brainstation.io/career-guides/what-are-ios-developer-resumes">What Is an iOS Developer Resume? (2022 Guide) | BrainStation®</a></li><li><a href="https://www.cakeresume.com/resources/ios-developer-resume?locale=en">iOS Developer Resume Sample (w/ Format &amp; Writing Steps) | CakeResume</a></li><li><a href="https://www.youtube.com/watch?v=REGn7Alsa7c">Как пройти интервью в Google?? Рассказ от первого лица</a></li><li><a href="https://www.raywenderlich.com/2617-ios-developer-resume-examples">iOS Developer Resume Examples | raywenderlich.com</a></li></ul><h3>Cover letter</h3><ul><li><a href="https://fearlesssalarynegotiation.com/how-to-write-a-cover-letter/">How to Write a Kick-Ass Cover Letter | Fearless Salary Negotiation</a></li><li><a href="https://brainstation.io/career-guides/what-are-ios-cover-letters">What Are iOS Developer Cover Letters? (2022 Guide) | BrainStation®</a></li><li><a href="https://daedtech.com/positioning-strategy-aspiring-consultant/">Positioning Strategy for the Aspiring Consultant - DaedTech</a></li><li><a href="https://www.lennysnewsletter.com/p/positioning">A quickstart guide to positioning - by Lenny Rachitsky</a></li><li><a href="https://www.lennysnewsletter.com/p/april-dunford-on-product-positioning">April Dunford on product positioning, segmentation, and optimizing your sales process</a></li><li><a href="https://www.aprildunford.com/post/a-product-positioning-exercise">A Product Positioning Exercise - April Dunford</a></li><li><a href="https://www.themuse.com/advice/the-perfect-cover-letter-template-to-show-off-your-skills">2 Customizable Cover Templates for Any Job Seeker | The Muse</a></li><li><a href="https://www.themuse.com/advice/how-to-write-a-cover-letter-31-tips-you-need-to-know">How to Write a Standout Cover Letter in 2022 | The Muse</a></li><li><a href="https://www.themuse.com/advice/how-to-start-a-cover-letter-opening-lines-examples">30 Better Ways to Start a Cover Letter | The Muse</a></li></ul><h3>Questions, Answers, Stories</h3><ul><li><a href="https://www.youtube.com/watch?v=vFOw_m5zNCs">Confessions from a Big Tech Hiring Manager: Tips for Software Engineering Interviews - YouTube</a></li><li><a href="https://www.hackingwithswift.com/articles/157/the-complete-guide-to-ios-and-swift-job-interviews">The Complete Guide to iOS and Swift Job Interviews – Hacking with Swift</a></li><li><a href="https://www.raywenderlich.com/25254417-acing-the-ios-interview">Acing the iOS Interview | raywenderlich.com</a></li><li><a href="https://www.raywenderlich.com/10625296-navigating-the-ios-interview">Navigating the iOS Interview | raywenderlich.com</a></li><li><a href="https://www.freecodecamp.org/news/software-engineering-interviews-744380f4f2af">I just got a developer job at Facebook. Here’s how I prepped for my interviews.</a></li></ul><p>Use the <a href="https://www.themuse.com/advice/star-interview-method">STAR method</a> to structure your story:</p><ol><li><strong>Situation</strong> (setup).</li><li><strong>Task</strong></li><li><strong>Action</strong></li><li><strong>Result</strong>. Control the narrative. Do not rely on your talents as a storyteller and the ability of a listener to draw the right conclusion(s), state the result yourself.</li></ol><p>Plus:</p><ol><li>Smile!</li><li>Buy Time if Necessary</li><li>Answer Enthusiastically</li><li>Ask a Follow Up Question</li></ol><p>Read more</p><ul><li><a href="https://www.themuse.com/advice/6-types-of-stories-you-should-have-on-hand-for-job-interviews">Best Stories to Tell in a Job Interview | The Muse</a></li><li><a href="https://www.themuse.com/advice/4-steps-for-answering-offthewall-interview-questions">How to Answer Unusual Interview Questions | The Muse</a></li></ul><p>Some questions I’ve seen a lot:</p><ul><li>What makes you interested in a role at … ?</li><li>What skills would you like to develop in the next 12 months?</li><li>Tell us about a project where you learned a lot. What would you do differently?</li><li>Please describe a project you recently worked on that was technically challenging. What made it challenging? How did you overcome its difficulties?</li><li>Tell us about an interesting app you’ve worked on. What made it interesting?</li><li>How do you use our products, or their competitors? How would you improve one of them?</li></ul><h2>Interviews</h2><p>Nervous? Make your brain think you’re excited!</p><blockquote><p>Don’t think about the outcome, be willing to learn and improve. Interview is a two-way street. They interview you, but you also interview them. Reverse-engineer the interview at the end. <a href="https://www.youtube.com/watch?v=vFOw_m5zNCs">Gergely Orosz: Confessions from a Big Tech Hiring Manager: Tips for Software Engineering Interviews - YouTube</a></p></blockquote><h3>Get to know</h3><ul><li>Make them love you</li><li><strong>Positioning</strong>. Connect skillset and experience to the goals and pain points of the company. Learn about the company, its goals, its current pain points, who their customers were, and little things that would help give better answers that would resonate with the interviewer. I find April Dunford’s thoughts and approaches quite helpful, see links in the <a href="#cover-letter">Cover Letter</a> section.</li></ul><h3>Phone Screening</h3><ul><li><a href="https://www.raywenderlich.com/34440170-effective-phone-screen-interview-tactics-for-mobile-developers?utm_campaign=rw-weekly-issue-381&utm_medium=email&utm_source=rw-weekly">Effective Phone Screen Interview Tactics for Mobile Developers | raywenderlich.com</a></li></ul><h3>Technical interview</h3><ul><li><a href="https://www.hackingwithswift.com/interview-questions">Swift Interview Questions – 150+ free interview questions from Hacking with Swift</a></li><li><a href="https://www.raywenderlich.com/762435-swift-interview-questions-and-answers">Swift Interview Questions and Answers | raywenderlich.com</a></li><li><a href="https://www.softwaretestinghelp.com/swift-interview-questions/">Top 50 Swift Interview Questions (Swift iOS Interview)</a></li><li><a href="https://tanaschita.com/tags/technical-interview/">Collection of iOS Interview Questions and Answers for Senior Developers by Natascha Fadeeva</a></li><li><a href="https://www.fullstack.cafe/blog/ios-interview-questions">37 Advanced iOS Developer Interview Questions (SOLVED and EXPLAINED) | FullStack.Cafe</a></li><li><a href="https://www.interviewcake.com">Programming Interview Questions + Help Getting Job Offers | Interview Cake</a></li><li><a href="https://leetcode.com/explore/">LeetCode: Explore</a></li><li><a href="https://www.geeksforgeeks.org">GeeksforGeeks | A computer science portal for geeks</a></li></ul><h4>Data structures and Algorithms</h4><ul><li><a href="https://www.raywenderlich.com/books/data-structures-algorithms-in-swift">Data Structures &amp; Algorithms in Swift | raywenderlich.com</a></li><li><a href="https://github.com/apple/swift-algorithms/tree/main/Sources/Algorithms">swift-algorithms/Sources/Algorithms at main · apple/swift-algorithms</a></li><li><a href="https://www.bigocheatsheet.com/">Big-O Algorithm Complexity Cheat Sheet (Know Thy Complexities!) @ericdrowell</a></li></ul><h3>System design interview</h3><ul><li>One of the best lists <a href="https://blog.pragmaticengineer.com/preparing-for-the-systems-design-and-coding-interviews/">Preparing for the Systems Design and Coding Interview</a> at <a href="https://blog.pragmaticengineer.com/">The Pragmatic Engineer</a></li><li>I really like <strong>System Design Interview</strong> book by <em>Alex Xu</em>. Check this insightful review <a href="https://blog.pragmaticengineer.com/system-design-interview-an-insiders-guide-review/">Finally, a Book for Getting Better at Architecting Systems</a> by <a href="https://blog.pragmaticengineer.com/">Gergely Orosz</a></li><li><a href="https://blog.bytebytego.com/p/algorithms-you-should-know-before">Algorithms you should know before you take system design interviews</a></li><li><a href="https://blog.bytebytego.com/p/free-system-design-pdf-158-pages">Free System Design PDF (158 pages) - by Alex Xu</a></li><li>Huge collection of examples at <a href="http://highscalability.com/blog/category/example">High Scalability</a>, like <a href="http://highscalability.com/blog/2022/1/25/designing-uber.html">Designing Uber</a> and <a href="http://highscalability.com/blog/2022/1/11/designing-instagram.html">Instagram</a></li><li>A well respected <a href="https://github.com/weeeBox/mobile-system-design">weeeBox/mobile-system-design: A simple framework for mobile system design interviews</a> with <a href="https://github.com/weeeBox/mobile-system-design/blob/master/common-interview-mistakes.md">Common Interview Mistakes</a> and <a href="https://github.com/weeeBox/mobile-system-design/tree/master/exercises">Typical Mobile System Design Interview Questions</a></li><li><a href="https://github.com/donnemartin/system-design-primer">Learn how to design large-scale systems. Prep for the system design interview. Includes Anki flashcards.</a></li><li><a href="https://themobileinterview.com/cracking-the-mobile-system-design-interview/">Cracking the Mobile System Design Interview (iOS &amp; Android)</a></li><li><a href="https://www.davidseek.com/fb/">How I would solve the Facebook iOS App Design Interview</a></li><li><a href="https://github.com/donnemartin/system-design-primer/tree/master/solutions/system_design/twitter">Design the Twitter timeline and search</a></li></ul><p>A pretty good <em>Mobile System Design Interviews</em> series by <em>Alex Lementuev (ProAndroidDev)</em>:</p><ul><li><a href="https://proandroiddev.com/a-simple-framework-for-mobile-system-design-interviews-89f6f4134b84">A Simple Framework For Mobile System Design Interviews</a></li><li><a href="https://proandroiddev.com/additional-topic-for-mobile-system-design-interviews-4c581cd93f0a">Additional Topics For Mobile System Design Interviews</a></li><li><a href="https://proandroiddev.com/mobile-system-design-exercise-file-downloader-library-ccb8ac0e5be4">Mobile System Design Exercise: File Downloader Library</a></li><li><a href="https://proandroiddev.com/mobile-system-design-exercise-caching-library-8b3b5f1433cd">Mobile System Design Exercise: Caching Library</a></li><li><a href="https://proandroiddev.com/mobile-system-design-exercise-image-library-83999eb0ad3c">Mobile System Design Exercise: Image Library</a></li><li><a href="https://proandroiddev.com/mobile-system-design-exercise-chat-application-12223a0c1ac">Mobile System Design Exercise: Chat Application</a></li><li><a href="https://proandroiddev.com/common-interview-mistakes-dba0518bb6c0">Common System Design Interview Mistakes</a></li></ul><h3>Behavioral interview</h3><ul><li><a href="https://www.themuse.com/advice/behavioral-interview-questions-answers-examples">The Top 30 Behavioral Interview Questions to Prep For | The Muse</a></li><li>Highly recommend <a href="https://onemoreinterview.ru/wewillcall/lebowski">Interview preparation service</a> by Victor Berchenko</li></ul><h2>Offer negotiation/ Salary negotiation (II)</h2><h3>You should negotiate</h3><ol><li>There could be money or other benefits on the table (actually “are” - see #3), but you might never know if you don’t ask. So, ask. Nicely.</li><li>No one ever revoked the offer just because the candidate politely(!) asked for more.</li><li>They are prepared - they do have more just in case someone they really like asks for more.</li></ol><h3>Email vs phone</h3><p>Pick whatever is more comfortable for you, but don’t forget, that it’s possible to misinterpret any text, and it’s easier to clarify things in the live conversation.</p><h3>Keep positive</h3><p>This is not a war or fight. Use collaborative tactics. Image yourself discussing lunch options with friends.</p><h3>“No”</h3><p>Don’t take “no” personally. “No” is just “no”.</p><h3>Offer Structure</h3><p>Consider the whole offer structure, not just the base salary, but bonuses, one-time payments, perks, options/RSUs, relocation packages, etc.</p><h3>Links</h3><ul><li>Excellent video <a href="https://www.youtube.com/watch?v=fyn0CKPuPlA">How to Negotiate Your Tech Salary Simulation ft. Levels.fyi - YouTube</a> at <a href="https://www.youtube.com/c/ExponentTV">Exponent Channel</a></li><li><a href="https://haseebq.com/how-not-to-bomb-your-offer-negotiation/">How Not to Bomb Your Offer Negotiation - haseeb qureshi</a></li><li><a href="https://haseebq.com/my-ten-rules-for-negotiating-a-job-offer/">Ten Rules for Negotiating a Job Offer - haseeb qureshi</a></li><li><a href="https://www.youtube.com/watch?v=km2Hd_xgo9Q">How to Negotiate Your Job Offer - Prof. Deepak Malhotra (Harvard Business School)</a></li></ul><h3>Offer Rejection</h3><p>Be polite, appreciate, do not over-share</p><ul><li><a href="https://www.wikijob.co.uk/application-advice/job-offers/how-decline-job-offer-politely">How to Decline a Job Offer Politely, With 7 Examples</a></li><li><a href="https://learning.shine.com/talenteconomy/career-help/how-to-decline-a-job-offer-due-to-salary/">How to Decline a Job Offer Due to Salary (With Email Templates) - Talent Economy</a></li><li><a href="https://hk.indeed.com/career-advice/finding-a-job/how-to-politely-reject-a-job-offer">How To Politely Reject a Job Offer (With Email Examples) | Indeed.com</a></li><li><a href="https://www.betterup.com/blog/how-to-decline-a-job-offer">How to Decline a Job Offer: 3 Examples to Say No Thanks</a></li></ul><h2>References</h2><ul><li><a href="https://www.hackingwithswift.com/articles/10/how-to-get-a-job-as-an-ios-developer">How to get a job as an iOS developer – Hacking with Swift</a></li><li><a href="https://www.hackingwithswift.com/career-guide">Swift Career Guide – build your iOS developer career today</a></li><li><a href="https://blog.goncharov.page/how-i-got-multiple-faang-offers-in-europe">How I got multiple FAANG offers in Europe</a></li><li><a href="https://artsy.github.io/blog/2016/01/30/iOS-Junior-Interviews/?flawlessappnewsletter">Interviewing, applying and getting your first job in iOS - Artsy Engineering</a></li><li><a href="https://www.levels.fyi/">Compare career levels across companies with Levels.fyi</a></li><li><a href="https://www.teamblind.com">Anonymous Professional Network - Blind</a><ul></ul></li></ul><h2>Books</h2><ul><li><strong>Never Split the Difference: Negotiating As If Your Life Depended On It</strong> by Chris Voss, Tahl Raz - great book by former FBI negotiator. Audiobook is quite good.</li><li><strong>Grokking Algorithms</strong> by Aditya Y. Bhargava</li><li><strong>Cracking the Coding Interview</strong> by Gayle Laakmann McDowell</li><li><strong>System Design Interview</strong> by Alex Xu</li><li>Minto pyramid: <strong>The pyramid principle</strong> by Barbara Minto</li><li><strong>Dependency Injection Principles, Practices, and Patterns</strong> by Steven van Deursen and Mark Seemann</li><li><strong>A Philosophy of Software Design</strong> by John Ousterhout</li><li><strong>Algorithms to Live By: The Computer Science of Human Decisions</strong> by Brian Christian, Tom Griffiths</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://igor1309.github.com/articles/2022/2022-06-15-websockets</guid><title>WebSockets in iOS</title><description>WebSockets in iOS</description><link>https://igor1309.github.com/articles/2022/2022-06-15-websockets</link><pubDate>Wed, 15 Jun 2022 10:10:00 +0000</pubDate><content:encoded><![CDATA[<h1>WebSockets in iOS</h1><h2>WebSockets</h2><ul><li><a href="https://en.wikipedia.org/wiki/WebSocket">WebSocket - Wikipedia</a></li></ul><ul><li><a href="https://datatracker.ietf.org/doc/html/rfc6455">RFC 6455 - The WebSocket Protocol</a></li></ul><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API">The WebSocket API (WebSockets) - Web APIs | MDN</a></li></ul><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket">WebSocket - Web APIs | MDN</a></li></ul><ul><li><a href="https://www.asyncapi.com/blog/websocket-part1">WebSocket, Shrek, and AsyncAPI - An Opinionated Intro | AsyncAPI Initiative for event-driven APIs</a></li></ul><p>Exploring <a href="https://docs.kraken.com/websockets/"><code>Kraken Websockets API</code></a> using <a href="https://github.com/vi/websocat#installation"><code>websocat</code></a> CLI</p><h2>WebSockets in iOS</h2><ul><li><a href="https://www.donnywals.com/real-time-data-exchange-using-web-sockets-in-ios-13/">Real time data exchange using web sockets in iOS 13 – Donny Wals</a></li></ul><ul><li><a href="https://www.raywenderlich.com/13209594-an-introduction-to-websockets">An Introduction to WebSockets | raywenderlich.com</a> by <a href="https://www.raywenderlich.com/u/mrlotu">Jari Koopman</a>: Learn about WebSockets using Swift and Vapor by building a question and answer client and server app (subscription only).</li></ul><ul><li>A good summary <a href="https://kristaps.me/blog/websockets-ios-13-swift/">Websockets in iOS 13 using Swift and Xcode 11 | Kristaps Grinbergs</a></li></ul><ul><li><a href="https://jayeshkawli.ghost.io/using-websockets-on-ios-using/">WebSockets on iOS using URLSessionWebSocketTask</a></li></ul><ul><li><a href="https://obscuredpixels.com/awaiting-websockets-in-swiftui">Awaiting WebSockets in SwiftUI</a> using <code>AsyncSequence</code></li></ul><ul><li><a href="https://developer.apple.com/documentation/foundation/urlsessionwebsockettask">URLSessionWebSocketTask | Apple Developer Documentation</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/foundation/urlsession/3235750-websockettask">webSocketTask(with:) | Apple Developer Documentation</a></li></ul><p>To add custom protocols, add a header with the key Sec-WebSocket-Protocol, and a comma-separated list of protocols you want to negotiate with the server. The custom HTTP headers provided by the client remain unchanged for the handshake with the server.</p><h2>Local Servers with WebSockets</h2><ul><li><a href="https://devcenter.heroku.com/articles/node-websockets">Using WebSockets on Heroku with Node.js | Heroku Dev Center</a></li></ul><h2>Echo WebSockets and Other Tools</h2><ul><li><a href="https://websocketking.com/">WebSocket King client: A testing and debugging tool for WebSockets</a></li></ul><ul><li>Echo and how setup your own <a href="https://www.lob.com/blog/websocket-org-is-down-here-is-an-alternative">echo.websocket.org no longer available</a></li></ul><ul><li><a href="https://github.com/vi/websocat#installation">vi/websocat: Command-line client for WebSockets, like netcat (or curl) for ws:// with advanced socat-like functions</a></li></ul><ul><li><a href="https://www.piesocket.com/websocket-tester">Online WebSocket &amp; Socket.io Tester - PieSocket Realtime</a></li></ul><h2>Gists and Libraries</h2><ul><li><a href="https://gist.github.com/emorydunn/e6b5c9803e5774c26926595a63b23f37">A publisher that delivers the messages from a WebSocket. · GitHub</a></li></ul><ul><li><a href="https://github.com/shareup/websocket-apple">GitHub - shareup/websocket-apple</a></li></ul><h2>SO</h2><ul><li><a href="https://stackoverflow.com/questions/66153671/swift5-urlsessionwebsockettask-response-to-ping-from-server-with-client-pong/72549037#72549037">websocket - Swift5 - URLSessionWebSocketTask - response to ping from server with client pong - Stack Overflow</a></li></ul><ul><li><a href="https://stackoverflow.com/questions/72020662/how-can-i-detect-a-server-ping-using-urlsessionwebsockettask/72178197#72178197">ios - How can I detect a server ping using URLSessionWebSocketTask? - Stack Overflow</a></li></ul><ul><li><a href="https://stackoverflow.com/questions/60246206/ios-13-urlsessionwebsockettask-current-connection-status">swift - iOS 13 URLSessionWebSocketTask Current Connection Status - Stack Overflow</a></li></ul><ul><li>Unanswered <a href="https://stackoverflow.com/questions/71344265/urlsessionwebsockettask-receive-doesnt-throw-on-cancel">ios - URLSessionWebSocketTask.receive() doesn’t throw on cancel() - Stack Overflow</a></li></ul><ul><li><a href="https://stackoverflow.com/questions/25299166/shared-session-vs-session-with-default-configuration/25392272#25392272">URSession.shared vs URLSession(configuration: .default) - Stack Overflow</a></li></ul><h2>WebSockets APIs</h2><ul><li><a href="https://docs.kraken.com/websockets/">Kraken Websockets API documentation</a></li></ul><ul><li><a href="https://docs.gemini.com/websocket-api/#introduction">Gemini WebSocket API Reference</a></li></ul><ul><li><a href="https://cex.io/websocket-api">WebSocket API - CEX.IO</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://igor1309.github.com/articles/2022/2022-05-16-convolution-and-image-kernels</guid><title>Convolution &amp; Image Kernels (Links)</title><description>Useful links about convolution and image kernels</description><link>https://igor1309.github.com/articles/2022/2022-05-16-convolution-and-image-kernels</link><pubDate>Mon, 16 May 2022 10:10:00 +0000</pubDate><content:encoded><![CDATA[<h1>Convolution &amp; Image Kernels (Links)</h1><ul><li>Amazing illustration <a href="https://setosa.io/ev/image-kernels/">Image Kernels explained visually</a></li></ul><ul><li><a href="https://pyimagesearch.com/2016/07/25/convolutions-with-opencv-and-python/">Convolutions with OpenCV and Python - PyImageSearch</a></li></ul><ul><li><a href="https://aishack.in/tutorials/convolutions/">Convolutions: Basics of convolutions - AI Shack</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/accelerate/convolution">Convolution | Apple Developer Documentation</a></li></ul><ul><li><a href="https://developer.apple.com/documentation/accelerate/vdsp/2d_convolution">2D Convolution | Apple Developer Documentation</a></li></ul><ul><li><a href="https://learnopencv.com/image-filtering-using-convolution-in-opencv/">Image Filtering Using Convolution in OpenCV | LearnOpenCV #</a></li></ul><ul><li><a href="https://www.youtube.com/watch?v=uihBwtPIBxM">Finding the Edges (Sobel Operator) - Computerphile - YouTube</a></li></ul><ul><li><a href="https://www.youtube.com/watch?v=C_zFhWdM4ic">How Blurs &amp; Filters Work - Computerphile - YouTube</a></li></ul><ul><li><a href="https://www.youtube.com/watch?v=8rrHTtUzyZA">Convolutions in image processing | Week 1 | MIT 18.S191 Fall 2020 | Grant Sanderson - YouTube</a></li></ul><ul><li><a href="https://www.youtube.com/watch?v=1GUgD2SBl9A">95 - What is digital image filtering and image convolution? - YouTube</a></li></ul><ul><li><a href="https://www.youtube.com/watch?v=mbXtzv1syCc">Filters Kernels and Convolution in Image Processing - YouTube</a></li></ul><ul><li><a href="https://stackoverflow.com/a/70429242/11793043">ios - Vertical edge detection with convolution giving transparent image as result with Swift - Stack Overflow</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://igor1309.github.com/articles/2022/2022-03-23-secrets</guid><title>API Keys and Secrets</title><description>How to store API keys and secrets, hide them from GitHib</description><link>https://igor1309.github.com/articles/2022/2022-03-23-secrets</link><pubDate>Wed, 23 Mar 2022 10:10:00 +0000</pubDate><content:encoded><![CDATA[<h1>API Keys and Secrets</h1><ul><li><a href="https://nshipster.com/secrets/">Secret Management on iOS - NSHipster</a><ul></ul></li></ul><ul><li><a href="https://www.raywenderlich.com/books/ios-app-distribution-best-practices/v1.0/chapters/11-managing-secrets">iOS App Distribution &amp; Best Practices, Chapter 11: Managing Secrets | raywenderlich.com</a> using build configuration files</li></ul><ul><li><a href="https://peterfriese.dev/posts/reading-api-keys-from-plist-files/">Fetching API Keys from Property List Files - Tips &amp; Tricks for iOS Development | Peter Friese</a> with a script to automatically create file from sample</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://igor1309.github.com/articles/2022/2022-02-07-json</guid><title>JSON</title><description>JSON - essential links and cases</description><link>https://igor1309.github.com/articles/2022/2022-02-07-json</link><pubDate>Mon, 7 Feb 2022 10:10:00 +0000</pubDate><content:encoded><![CDATA[<h1>JSON</h1><ul><li><a href="https://swiftsenpai.com/swift/decode-dynamic-keys-json/">Decode and Flatten JSON with Dynamic Keys Using Decodable</a></li></ul><ul><li><a href="https://www.kiloloco.com/articles/009-using-decodable-dynamic-values-swift/">Using Decodable with Dynamic Values in Swift | Kilo Loco</a></li></ul><ul><li><a href="https://www.donnywals.com/splitting-a-json-object-into-an-enum-and-an-associated-object-with-codable/">Splitting a JSON object into an enum and an associated object with Codable – Donny Wals</a></li></ul><ul><li><a href="https://benscheirman.com/2017/06/swift-json/">Ultimate Guide to JSON Parsing with Swift</a></li></ul><ul><li><a href="https://stackoverflow.com/questions/46292325/what-is-difference-between-optional-and-decodeifpresent-when-using-decodable-for">swift - What is difference between optional and decodeIfPresent when using Decodable for JSON Parsing? - Stack Overflow</a></li></ul><ul><li><a href="https://www.hackingwithswift.com/articles/119/codable-cheat-sheet">Codable cheat sheet – Hacking with Swift</a></li></ul><h2>SO</h2><ul><li><a href="https://stackoverflow.com/a/71301822/11793043">json - Swift Codable: subclass JSONDecoder for custom behavior - Stack Overflow</a></li></ul><h2>Cases</h2><h3>Case 1</h3><p>To decode JSON that represents the array of <em>heterogeneous elements</em> as a <em>struct</em> with fields that hold those elements, use <a href="https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer"><code>UnkeyedDecodingContainer</code></a> and iterate over fields with func <code>decode()</code>. Each call of <code>decode()</code> moves iteration to the next element, make sure to decode all fields by checking the <a href="https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/2892719-count"><code>count</code></a> or <a href="https://developer.apple.com/documentation/swift/unkeyeddecodingcontainer/2892732-isatend"><code>isAtEnd</code></a> properties.</p><pre><code><span class="keyword">import</span> Foundation

<span class="comment">/// `Payload`:
///
///     [
///         0,
///         "XBT/USD"
///     ]
///</span>
<span class="keyword">struct</span> Message {
    <span class="keyword">let</span> channelID: <span class="type">Int</span>
    <span class="keyword">let</span> pair: <span class="type">String</span>
}

<span class="keyword">extension</span> <span class="type">Message</span>: <span class="type">Decodable</span> {
    <span class="keyword">init</span>(from decoder: <span class="type">Decoder</span>) <span class="keyword">throws</span> {
        <span class="keyword">var</span> container = <span class="keyword">try</span> decoder.<span class="call">unkeyedContainer</span>()

        <span class="keyword">let</span> channelID = <span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">Int</span>.<span class="keyword">self</span>)
        <span class="keyword">let</span> pair = <span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">String</span>.<span class="keyword">self</span>)

        <span class="keyword">guard</span> container.<span class="property">isAtEnd</span> <span class="keyword">else</span> {
            <span class="keyword">throw</span> <span class="type">ThereIsMoreToDecodeError</span>()
        }

        <span class="keyword">self</span>.<span class="keyword">init</span>(channelID: channelID, pair: pair)
    }

    <span class="keyword">struct</span> ThereIsMoreToDecodeError: <span class="type">Error</span> {}
}
</code></pre><p>Run to test</p><pre><code><span class="keyword">let</span> payload = <span class="string">"""
    [
        0,
        "XBT/USD"
    ]
"""</span>

<span class="keyword">let</span> data = <span class="type">Data</span>(payload.<span class="property">utf8</span>)
<span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()
<span class="keyword">let</span> message = <span class="keyword">try</span> decoder.<span class="call">decode</span>(<span class="type">Message</span>.<span class="keyword">self</span>, from: data)
</code></pre><h3>Case 2</h3><p>To decode heterogeneous array where elements have common and different parts use struct with enum field for changing part and non-enum for common part.</p><pre><code><span class="keyword">import</span> Foundation

<span class="comment">/// `Payload`
///
///     [
///         {
///             "channelID": 10001,
///             "channelName": "ticker",
///             "event": "subscriptionStatus"
///         },
///         {
///             "errorMessage": "Subscription depth not supported",
///             "channelName": "ticker",
///             "event": "subscriptionStatus"
///         }
///     ]</span>
<span class="keyword">struct</span> Message {
    <span class="keyword">typealias</span> Name = <span class="type">String</span>
    <span class="keyword">typealias</span> Event = <span class="type">String</span>

    <span class="keyword">let</span> oneOf: <span class="type">OneOf</span>
    <span class="keyword">let</span> name: <span class="type">Name</span>
    <span class="keyword">let</span> event: <span class="type">Event</span>
}

<span class="keyword">extension</span> <span class="type">Message</span>: <span class="type">Decodable</span> {
    <span class="keyword">enum</span> CodingKeys: <span class="type">String</span>, <span class="type">CodingKey</span> {
        <span class="keyword">case</span> name, event
    }

    <span class="keyword">init</span>(from decoder: <span class="type">Decoder</span>) <span class="keyword">throws</span> {
        <span class="keyword">let</span> container = <span class="keyword">try</span> decoder.<span class="call">singleValueContainer</span>()
        <span class="keyword">let</span> oneOf = <span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">OneOf</span>.<span class="keyword">self</span>)

        <span class="keyword">let</span> keyedContainer = <span class="keyword">try</span> decoder.<span class="call">container</span>(keyedBy: <span class="type">CodingKeys</span>.<span class="keyword">self</span>)
        <span class="keyword">let</span> name = <span class="keyword">try</span> keyedContainer.<span class="call">decode</span>(<span class="type">Name</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">name</span>)
        <span class="keyword">let</span> event = <span class="keyword">try</span> keyedContainer.<span class="call">decode</span>(<span class="type">Event</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">event</span>)

        <span class="keyword">self</span>.<span class="keyword">init</span>(oneOf: oneOf, name: name, event: event)
    }
}

<span class="keyword">enum</span> OneOf: <span class="type">Decodable</span> {
    <span class="keyword">case</span> errorMessage(<span class="type">ErrorMessage</span>)
    <span class="keyword">case</span> channelID(<span class="type">ChannelID</span>)

    <span class="keyword">struct</span> ErrorMessage: <span class="type">Decodable</span> {
        <span class="keyword">let</span> errorMessage: <span class="type">String</span>
    }

    <span class="keyword">struct</span> ChannelID: <span class="type">Decodable</span> {
        <span class="keyword">let</span> channelID: <span class="type">Int</span>
    }

    <span class="keyword">enum</span> CodingKeys: <span class="type">String</span>, <span class="type">CodingKey</span> {
        <span class="keyword">case</span> errorMessage, channelID
    }

    <span class="keyword">init</span>(from decoder: <span class="type">Decoder</span>) <span class="keyword">throws</span> {
        <span class="keyword">do</span> {
            <span class="keyword">let</span> errorMessage = <span class="keyword">try</span> <span class="type">ErrorMessage</span>(from: decoder)
            <span class="keyword">self</span> = .<span class="call">errorMessage</span>(errorMessage)
        } <span class="keyword">catch</span> {
            <span class="keyword">let</span> channelID = <span class="keyword">try</span> <span class="type">ChannelID</span>(from: decoder)
            <span class="keyword">self</span> = .<span class="call">channelID</span>(channelID)
        }
    }
}
</code></pre><p>Run to test</p><pre><code><span class="keyword">let</span> payload = <span class="string">"""
     [
         {
             "channelID": 10001,
             "name": "ticker",
             "event": "subscriptionStatus"
         },
         {
             "errorMessage": "Subscription depth not supported",
             "name": "ticker",
             "event": "subscriptionStatus"
         }
     ]
"""</span>

<span class="keyword">let</span> data = <span class="type">Data</span>(payload.<span class="property">utf8</span>)
<span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()
<span class="keyword">let</span> messages = <span class="keyword">try</span> decoder.<span class="call">decode</span>([<span class="type">Message</span>].<span class="keyword">self</span>, from: data)
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://igor1309.github.com/articles/2022/2022-01-27-combine</guid><title>Combine</title><description>Combine - essential links</description><link>https://igor1309.github.com/articles/2022/2022-01-27-combine</link><pubDate>Thu, 27 Jan 2022 10:10:00 +0000</pubDate><content:encoded><![CDATA[<h1>Combine</h1><ul><li><a href="https://heckj.github.io/swiftui-notes/">Using Combine</a> by Joseph Heck</li></ul><ul><li><a href="https://www.apeth.com/UnderstandingCombine/">Understanding Combine</a> by Matt Neuburg</li></ul><ul><li><a href="https://en.wikipedia.org/wiki/Functional_reactive_programming">Functional reactive programming - Wikipedia</a></li></ul><h2>Memory Management</h2><ul><li><a href="https://trycombine.com/posts/self-weak-unowned/">Using self, weak, and unowned in Combine</a></li></ul><ul><li><a href="https://www.swiftbysundell.com/articles/combine-self-cancellable-memory-management/">Managing self and cancellable references when using Combine | Swift by Sundell</a></li></ul><h2>Cases</h2><ul><li><a href="https://stackoverflow.com/questions/67813464/swift-combine-enqueue-updates-to-one-publisher-behind-another-publisher">Swift Combine: enqueue updates to one publisher behind another publisher - Stack Overflow</a></li></ul><ul><li><a href="https://stackoverflow.com/questions/61959647/swift-combine-operator-with-same-functionality-like-withlatestfrom-in-the-rxsw">ios - Swift Combine operator with same functionality like <code>withLatestFrom</code> in the RxSwift Framework - Stack Overflow</a></li></ul><h2>Handling Errors</h2><ul><li>Quite comprehensive <a href="https://peterfriese.dev/posts/swiftui-combine-networking-errorhandling/">Error Handling with Combine and SwiftUI - How to handle errors and expose them to the user | Peter Friese</a></li></ul><ul><li><a href="https://swiftwithmajid.com/2020/04/22/catching-errors-in-combine/">Catching errors in Combine | Swift with Majid</a></li></ul><h2>Basics</h2><ul><li><a href="https://peterfriese.de/posts/swiftui-combine-networking-gettingstarted/">Networking with Combine and SwiftUI - Getting Started | Peter Friese</a></li></ul><ul><li><a href="https://peterfriese.de/posts/swiftui-combine-networking-efficient/">Optimise your networking layer with Combine - Efficient networking for SwiftUI apps | Peter Friese</a>: using <code>share</code>, <code>debounce</code>, and <code>removeDuplicates</code>.</li></ul><ul><li><a href="https://peterfriese.dev/posts/swiftui-combine-custom-operators/">Building a Custom Combine Operator for Exponential Backoff - Make your Combine code reusable | Peter Friese</a></li></ul><h2>Combine and Swift Concurrency</h2><ul><li><a href="https://www.swiftbysundell.com/articles/async-sequences-streams-and-combine/">Async sequences, streams, and Combine | Swift by Sundell</a></li></ul><ul><li><a href="https://www.swiftbysundell.com/articles/calling-async-functions-within-a-combine-pipeline/">Calling async functions within a Combine pipeline | Swift by Sundell</a></li></ul><ul><li><a href="https://peterfriese.dev/posts/combine-vs-async/">Asynchronous programming with SwiftUI and Combine - The Future of Combine and async/await | Peter Friese</a></li></ul><ul><li><a href="https://wwdcbysundell.com/2021/the-future-of-combine/">What Swift’s new concurrency features might mean for the future of Combine | WWDC by Sundell &amp; Friends</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://igor1309.github.com/articles/2022/2022-08-11-bug-report-checklist</guid><title>Bug Report Checklist</title><description>Bug Report Checklist</description><link>https://igor1309.github.com/articles/2022/2022-08-11-bug-report-checklist</link><pubDate>Thu, 27 Jan 2022 10:10:00 +0000</pubDate><content:encoded><![CDATA[<h1>Bug Report Checklist</h1><ul><li>Have you provided a full/minimal spec to reproduce the issue?</li><li>Have you tested with the latest master to confirm the issue still exists?</li><li>Have you searched for related issues/PRs?</li><li>What's the actual output vs expected output?</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://igor1309.github.com/articles/2021/2021-12-28-inverted-mask</guid><title>Create inverted mask with SwiftUI</title><description>Create inverted mask with SwiftUI</description><link>https://igor1309.github.com/articles/2021/2021-12-28-inverted-mask</link><pubDate>Tue, 28 Dec 2021 10:10:00 +0000</pubDate><content:encoded><![CDATA[<h1>Create inverted mask with SwiftUI</h1>]]></content:encoded></item><item><guid isPermaLink="true">https://igor1309.github.com/articles/2021/2021-12-25-publish</guid><title>Website with Publish</title><description>Building website with Publish, hosting with GitHub.</description><link>https://igor1309.github.com/articles/2021/2021-12-25-publish</link><pubDate>Sat, 25 Dec 2021 21:12:00 +0000</pubDate><content:encoded><![CDATA[<h1>Website with Publish</h1><p>By John Sundell <a href="https://github.com/JohnSundell/Publish">JohnSundell/Publish: A static site generator for Swift developers</a></p><p>Why Publish (motivation/reasons)</p><ul><li>Use Swift, Markdown, Git and GitHub</li><li>Use Working copy, iA Writer and iPad</li><li><a href="https://github.com/jekyll">Jekyll</a> and Ruby drive me crazy</li><li>John Sundell is awesome</li></ul><h2>Getting started with Publish</h2><ul><li><a href="https://briancoyner.github.io/articles/2020-02-25-cocoaheads_publish_notes/">8 Tips To Help You Get Started With Publish | Brian Coyner</a><ul><li>Tip #7: Deploying to Github Pages</li><li>Tip #8: Working with drafts</li></ul></li></ul><ul><li><a href="https://blog.bitomule.com/posts/getting-started-with-publish/">Getting started with publish - Bitomule's learning shack</a></li><li><a href="https://www.youtube.com/watch?v=JqdS-oi96Gk">Create A Blog Website Using Swift and Publish | Swift 5, Xcode 11 - YouTube</a></li></ul><h2>Next</h2><ul><li><a href="https://blog.bitomule.com/posts/automating-deploy-of-your-publish-site-to-github-pages/">Automating deploy of your publish site to github pages - Bitomule's learning shack</a><ul><li>Deploy new website version each time you commit changes to our blog repository using Github Actions<ul><li>Use iPad for blogging (with Working copy and iA Writer)</li></ul></li></ul></li></ul><ul><li>BEWARE IMPORTANT: ... if you use custom domain (GitHub repo Settings/Pages), otherwise deploying would overwrite custom domain (the repo's "Custom domain" setting is reset)<ul></ul></li></ul><ul><li><a href="https://blog.devgenius.io/create-blog-with-swift-github-pages-53382aa3e824">Create a Blog With Swift and GitHub Pages | Dev Genius</a><ul><li>Add highlighting to source files: The author of the Publish generator also wrote the <a href="https://github.com/JohnSundell/Splash">Splash</a> library, which allows you to highlight source codes. It is connected as a package in the Swift Package Manager.</li></ul></li></ul><br/><pre><code><span class="keyword">try</span> <span class="type">Blog</span>().<span class="call">publish</span>(
    withTheme: .<span class="dotAccess">foundation</span>,
    plugins: [.<span class="call">splash</span>(withClassPrefix: <span class="string">""</span>)]
)
</code></pre><br/>]]></content:encoded></item></channel></rss>